module.exports = [
"[project]/node_modules/@getbrevo/brevo/dist/api/accountApi.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __awaiter = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AccountApi = exports.AccountApiApiKeys = void 0;
const requestCompat_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/requestCompat.js [app-rsc] (ecmascript)"));
const models_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const models_2 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const apis_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/apis.js [app-rsc] (ecmascript)");
let defaultBasePath = 'https://api.brevo.com/v3';
var AccountApiApiKeys;
(function(AccountApiApiKeys) {
    AccountApiApiKeys[AccountApiApiKeys["apiKey"] = 0] = "apiKey";
    AccountApiApiKeys[AccountApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(AccountApiApiKeys = exports.AccountApiApiKeys || (exports.AccountApiApiKeys = {}));
class AccountApi {
    constructor(basePathOrUsername, password, basePath){
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'apiKey': new models_2.ApiKeyAuth('header', 'api-key'),
            'partnerKey': new models_2.ApiKeyAuth('header', 'partner-key')
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[AccountApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    getAccount(options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/account';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetAccount");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getAccountActivity(startDate, endDate, limit, offset, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/organization/activities';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (startDate !== undefined) {
                localVarQueryParameters['startDate'] = models_1.ObjectSerializer.serialize(startDate, "string");
            }
            if (endDate !== undefined) {
                localVarQueryParameters['endDate'] = models_1.ObjectSerializer.serialize(endDate, "string");
            }
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetAccountActivity");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.AccountApi = AccountApi; //# sourceMappingURL=accountApi.js.map
}),
"[project]/node_modules/@getbrevo/brevo/dist/api/companiesApi.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __awaiter = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CompaniesApi = exports.CompaniesApiApiKeys = void 0;
const requestCompat_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/requestCompat.js [app-rsc] (ecmascript)"));
const models_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const models_2 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const apis_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/apis.js [app-rsc] (ecmascript)");
let defaultBasePath = 'https://api.brevo.com/v3';
var CompaniesApiApiKeys;
(function(CompaniesApiApiKeys) {
    CompaniesApiApiKeys[CompaniesApiApiKeys["apiKey"] = 0] = "apiKey";
    CompaniesApiApiKeys[CompaniesApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(CompaniesApiApiKeys = exports.CompaniesApiApiKeys || (exports.CompaniesApiApiKeys = {}));
class CompaniesApi {
    constructor(basePathOrUsername, password, basePath){
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'apiKey': new models_2.ApiKeyAuth('header', 'api-key'),
            'partnerKey': new models_2.ApiKeyAuth('header', 'partner-key')
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[CompaniesApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    companiesAttributesGet(options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/companies/attributes';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Array<CompanyAttributesInner>");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    companiesGet(filters, linkedContactsIds, linkedDealsIds, page, limit, sort, sortBy, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/companies';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json',
                'response'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (filters !== undefined) {
                localVarQueryParameters['filters'] = models_1.ObjectSerializer.serialize(filters, "string");
            }
            if (linkedContactsIds !== undefined) {
                localVarQueryParameters['linkedContactsIds'] = models_1.ObjectSerializer.serialize(linkedContactsIds, "number");
            }
            if (linkedDealsIds !== undefined) {
                localVarQueryParameters['linkedDealsIds'] = models_1.ObjectSerializer.serialize(linkedDealsIds, "string");
            }
            if (page !== undefined) {
                localVarQueryParameters['page'] = models_1.ObjectSerializer.serialize(page, "number");
            }
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            if (sortBy !== undefined) {
                localVarQueryParameters['sortBy'] = models_1.ObjectSerializer.serialize(sortBy, "string");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CompaniesList");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    companiesIdDelete(id, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/companies/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling companiesIdDelete.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    companiesIdGet(id, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/companies/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling companiesIdGet.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Company");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    companiesIdPatch(id, body, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/companies/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling companiesIdPatch.');
            }
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling companiesIdPatch.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PATCH',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(body, "CompaniesIdPatchRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Company");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    companiesLinkUnlinkIdPatch(id, body, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/companies/link-unlink/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json',
                'response'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling companiesLinkUnlinkIdPatch.');
            }
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling companiesLinkUnlinkIdPatch.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PATCH',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(body, "CompaniesLinkUnlinkIdPatchRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    companiesPost(body, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/companies';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling companiesPost.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(body, "CompaniesPostRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CompaniesPost200Response");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.CompaniesApi = CompaniesApi; //# sourceMappingURL=companiesApi.js.map
}),
"[project]/node_modules/@getbrevo/brevo/dist/api/contactsApi.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __awaiter = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ContactsApi = exports.ContactsApiApiKeys = void 0;
const requestCompat_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/requestCompat.js [app-rsc] (ecmascript)"));
const models_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const models_2 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const apis_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/apis.js [app-rsc] (ecmascript)");
let defaultBasePath = 'https://api.brevo.com/v3';
var ContactsApiApiKeys;
(function(ContactsApiApiKeys) {
    ContactsApiApiKeys[ContactsApiApiKeys["apiKey"] = 0] = "apiKey";
    ContactsApiApiKeys[ContactsApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(ContactsApiApiKeys = exports.ContactsApiApiKeys || (exports.ContactsApiApiKeys = {}));
class ContactsApi {
    constructor(basePathOrUsername, password, basePath){
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'apiKey': new models_2.ApiKeyAuth('header', 'api-key'),
            'partnerKey': new models_2.ApiKeyAuth('header', 'partner-key')
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ContactsApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    addContactToList(listId, contactEmails, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/contacts/lists/{listId}/contacts/add'.replace('{' + 'listId' + '}', encodeURIComponent(String(listId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (listId === null || listId === undefined) {
                throw new Error('Required parameter listId was null or undefined when calling addContactToList.');
            }
            if (contactEmails === null || contactEmails === undefined) {
                throw new Error('Required parameter contactEmails was null or undefined when calling addContactToList.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(contactEmails, "AddContactToList")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "PostContactInfo");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    createAttribute(attributeCategory, attributeName, createAttribute, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/contacts/attributes/{attributeCategory}/{attributeName}'.replace('{' + 'attributeCategory' + '}', encodeURIComponent(String(attributeCategory))).replace('{' + 'attributeName' + '}', encodeURIComponent(String(attributeName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (attributeCategory === null || attributeCategory === undefined) {
                throw new Error('Required parameter attributeCategory was null or undefined when calling createAttribute.');
            }
            if (attributeName === null || attributeName === undefined) {
                throw new Error('Required parameter attributeName was null or undefined when calling createAttribute.');
            }
            if (createAttribute === null || createAttribute === undefined) {
                throw new Error('Required parameter createAttribute was null or undefined when calling createAttribute.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(createAttribute, "CreateAttribute")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    createContact(createContact, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/contacts';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (createContact === null || createContact === undefined) {
                throw new Error('Required parameter createContact was null or undefined when calling createContact.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(createContact, "CreateContact")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CreateUpdateContactModel");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    createDoiContact(createDoiContact, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/contacts/doubleOptinConfirmation';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (createDoiContact === null || createDoiContact === undefined) {
                throw new Error('Required parameter createDoiContact was null or undefined when calling createDoiContact.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(createDoiContact, "CreateDoiContact")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    createFolder(createFolder, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/contacts/folders';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (createFolder === null || createFolder === undefined) {
                throw new Error('Required parameter createFolder was null or undefined when calling createFolder.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(createFolder, "CreateUpdateFolder")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CreateModel");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    createList(createList, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/contacts/lists';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (createList === null || createList === undefined) {
                throw new Error('Required parameter createList was null or undefined when calling createList.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(createList, "CreateList")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CreateModel");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    deleteAttribute(attributeCategory, attributeName, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/contacts/attributes/{attributeCategory}/{attributeName}'.replace('{' + 'attributeCategory' + '}', encodeURIComponent(String(attributeCategory))).replace('{' + 'attributeName' + '}', encodeURIComponent(String(attributeName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (attributeCategory === null || attributeCategory === undefined) {
                throw new Error('Required parameter attributeCategory was null or undefined when calling deleteAttribute.');
            }
            if (attributeName === null || attributeName === undefined) {
                throw new Error('Required parameter attributeName was null or undefined when calling deleteAttribute.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    deleteContact(identifier, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/contacts/{identifier}'.replace('{' + 'identifier' + '}', encodeURIComponent(String(identifier)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (identifier === null || identifier === undefined) {
                throw new Error('Required parameter identifier was null or undefined when calling deleteContact.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    deleteFolder(folderId, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/contacts/folders/{folderId}'.replace('{' + 'folderId' + '}', encodeURIComponent(String(folderId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (folderId === null || folderId === undefined) {
                throw new Error('Required parameter folderId was null or undefined when calling deleteFolder.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    deleteList(listId, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/contacts/lists/{listId}'.replace('{' + 'listId' + '}', encodeURIComponent(String(listId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (listId === null || listId === undefined) {
                throw new Error('Required parameter listId was null or undefined when calling deleteList.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getAttributes(options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/contacts/attributes';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetAttributes");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getContactInfo(identifier, startDate, endDate, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/contacts/{identifier}'.replace('{' + 'identifier' + '}', encodeURIComponent(String(identifier)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (identifier === null || identifier === undefined) {
                throw new Error('Required parameter identifier was null or undefined when calling getContactInfo.');
            }
            if (startDate !== undefined) {
                localVarQueryParameters['startDate'] = models_1.ObjectSerializer.serialize(startDate, "string");
            }
            if (endDate !== undefined) {
                localVarQueryParameters['endDate'] = models_1.ObjectSerializer.serialize(endDate, "string");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetExtendedContactDetails");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getContactStats(identifier, startDate, endDate, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/contacts/{identifier}/campaignStats'.replace('{' + 'identifier' + '}', encodeURIComponent(String(identifier)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (identifier === null || identifier === undefined) {
                throw new Error('Required parameter identifier was null or undefined when calling getContactStats.');
            }
            if (startDate !== undefined) {
                localVarQueryParameters['startDate'] = models_1.ObjectSerializer.serialize(startDate, "string");
            }
            if (endDate !== undefined) {
                localVarQueryParameters['endDate'] = models_1.ObjectSerializer.serialize(endDate, "string");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetContactCampaignStats");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getContacts(limit, offset, modifiedSince, createdSince, sort, segmentId, listIds, filter, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/contacts';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            if (modifiedSince !== undefined) {
                localVarQueryParameters['modifiedSince'] = models_1.ObjectSerializer.serialize(modifiedSince, "string");
            }
            if (createdSince !== undefined) {
                localVarQueryParameters['createdSince'] = models_1.ObjectSerializer.serialize(createdSince, "string");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            if (segmentId !== undefined) {
                localVarQueryParameters['segmentId'] = models_1.ObjectSerializer.serialize(segmentId, "number");
            }
            if (listIds !== undefined) {
                localVarQueryParameters['listIds'] = models_1.ObjectSerializer.serialize(listIds, "Array<number>");
            }
            if (filter !== undefined) {
                localVarQueryParameters['filter'] = models_1.ObjectSerializer.serialize(filter, "string");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetContacts");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getContactsFromList(listId, modifiedSince, limit, offset, sort, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/contacts/lists/{listId}/contacts'.replace('{' + 'listId' + '}', encodeURIComponent(String(listId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (listId === null || listId === undefined) {
                throw new Error('Required parameter listId was null or undefined when calling getContactsFromList.');
            }
            if (modifiedSince !== undefined) {
                localVarQueryParameters['modifiedSince'] = models_1.ObjectSerializer.serialize(modifiedSince, "string");
            }
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetContacts");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getFolder(folderId, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/contacts/folders/{folderId}'.replace('{' + 'folderId' + '}', encodeURIComponent(String(folderId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (folderId === null || folderId === undefined) {
                throw new Error('Required parameter folderId was null or undefined when calling getFolder.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetFolder");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getFolderLists(folderId, limit, offset, sort, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/contacts/folders/{folderId}/lists'.replace('{' + 'folderId' + '}', encodeURIComponent(String(folderId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (folderId === null || folderId === undefined) {
                throw new Error('Required parameter folderId was null or undefined when calling getFolderLists.');
            }
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetFolderLists");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getFolders(limit, offset, sort, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/contacts/folders';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (limit === null || limit === undefined) {
                throw new Error('Required parameter limit was null or undefined when calling getFolders.');
            }
            if (offset === null || offset === undefined) {
                throw new Error('Required parameter offset was null or undefined when calling getFolders.');
            }
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetFolders");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getList(listId, startDate, endDate, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/contacts/lists/{listId}'.replace('{' + 'listId' + '}', encodeURIComponent(String(listId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (listId === null || listId === undefined) {
                throw new Error('Required parameter listId was null or undefined when calling getList.');
            }
            if (startDate !== undefined) {
                localVarQueryParameters['startDate'] = models_1.ObjectSerializer.serialize(startDate, "string");
            }
            if (endDate !== undefined) {
                localVarQueryParameters['endDate'] = models_1.ObjectSerializer.serialize(endDate, "string");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetExtendedList");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getLists(limit, offset, sort, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/contacts/lists';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetLists");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getSegments(limit, offset, sort, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/contacts/segments';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (limit === null || limit === undefined) {
                throw new Error('Required parameter limit was null or undefined when calling getSegments.');
            }
            if (offset === null || offset === undefined) {
                throw new Error('Required parameter offset was null or undefined when calling getSegments.');
            }
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetSegments");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    importContacts(requestContactImport, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/contacts/import';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (requestContactImport === null || requestContactImport === undefined) {
                throw new Error('Required parameter requestContactImport was null or undefined when calling importContacts.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                data: models_1.ObjectSerializer.serialize(requestContactImport, "RequestContactImport")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CreatedProcessId");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    removeContactFromList(listId, contactEmails, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/contacts/lists/{listId}/contacts/remove'.replace('{' + 'listId' + '}', encodeURIComponent(String(listId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (listId === null || listId === undefined) {
                throw new Error('Required parameter listId was null or undefined when calling removeContactFromList.');
            }
            if (contactEmails === null || contactEmails === undefined) {
                throw new Error('Required parameter contactEmails was null or undefined when calling removeContactFromList.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(contactEmails, "RemoveContactFromList")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "PostContactInfo");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    requestContactExport(requestContactExport, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/contacts/export';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (requestContactExport === null || requestContactExport === undefined) {
                throw new Error('Required parameter requestContactExport was null or undefined when calling requestContactExport.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                data: models_1.ObjectSerializer.serialize(requestContactExport, "RequestContactExport")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CreatedProcessId");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    updateAttribute(attributeCategory, attributeName, updateAttribute, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/contacts/attributes/{attributeCategory}/{attributeName}'.replace('{' + 'attributeCategory' + '}', encodeURIComponent(String(attributeCategory))).replace('{' + 'attributeName' + '}', encodeURIComponent(String(attributeName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (attributeCategory === null || attributeCategory === undefined) {
                throw new Error('Required parameter attributeCategory was null or undefined when calling updateAttribute.');
            }
            if (attributeName === null || attributeName === undefined) {
                throw new Error('Required parameter attributeName was null or undefined when calling updateAttribute.');
            }
            if (updateAttribute === null || updateAttribute === undefined) {
                throw new Error('Required parameter updateAttribute was null or undefined when calling updateAttribute.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(updateAttribute, "UpdateAttribute")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    updateBatchContacts(updateBatchContacts, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/contacts/batch';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (updateBatchContacts === null || updateBatchContacts === undefined) {
                throw new Error('Required parameter updateBatchContacts was null or undefined when calling updateBatchContacts.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(updateBatchContacts, "UpdateBatchContacts")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    updateContact(identifier, updateContact, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/contacts/{identifier}'.replace('{' + 'identifier' + '}', encodeURIComponent(String(identifier)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (identifier === null || identifier === undefined) {
                throw new Error('Required parameter identifier was null or undefined when calling updateContact.');
            }
            if (updateContact === null || updateContact === undefined) {
                throw new Error('Required parameter updateContact was null or undefined when calling updateContact.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(updateContact, "UpdateContact")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    updateFolder(folderId, updateFolder, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/contacts/folders/{folderId}'.replace('{' + 'folderId' + '}', encodeURIComponent(String(folderId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (folderId === null || folderId === undefined) {
                throw new Error('Required parameter folderId was null or undefined when calling updateFolder.');
            }
            if (updateFolder === null || updateFolder === undefined) {
                throw new Error('Required parameter updateFolder was null or undefined when calling updateFolder.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(updateFolder, "CreateUpdateFolder")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    updateList(listId, updateList, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/contacts/lists/{listId}'.replace('{' + 'listId' + '}', encodeURIComponent(String(listId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (listId === null || listId === undefined) {
                throw new Error('Required parameter listId was null or undefined when calling updateList.');
            }
            if (updateList === null || updateList === undefined) {
                throw new Error('Required parameter updateList was null or undefined when calling updateList.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(updateList, "UpdateList")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.ContactsApi = ContactsApi; //# sourceMappingURL=contactsApi.js.map
}),
"[project]/node_modules/@getbrevo/brevo/dist/api/conversationsApi.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __awaiter = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ConversationsApi = exports.ConversationsApiApiKeys = void 0;
const requestCompat_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/requestCompat.js [app-rsc] (ecmascript)"));
const models_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const models_2 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const apis_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/apis.js [app-rsc] (ecmascript)");
let defaultBasePath = 'https://api.brevo.com/v3';
var ConversationsApiApiKeys;
(function(ConversationsApiApiKeys) {
    ConversationsApiApiKeys[ConversationsApiApiKeys["apiKey"] = 0] = "apiKey";
    ConversationsApiApiKeys[ConversationsApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(ConversationsApiApiKeys = exports.ConversationsApiApiKeys || (exports.ConversationsApiApiKeys = {}));
class ConversationsApi {
    constructor(basePathOrUsername, password, basePath){
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'apiKey': new models_2.ApiKeyAuth('header', 'api-key'),
            'partnerKey': new models_2.ApiKeyAuth('header', 'partner-key')
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ConversationsApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    conversationsAgentOnlinePingPost(body, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/conversations/agentOnlinePing';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling conversationsAgentOnlinePingPost.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(body, "ConversationsAgentOnlinePingPostRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    conversationsMessagesIdDelete(id, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/conversations/messages/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling conversationsMessagesIdDelete.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    conversationsMessagesIdGet(id, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/conversations/messages/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling conversationsMessagesIdGet.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "ConversationsMessage");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    conversationsMessagesIdPut(id, body, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/conversations/messages/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling conversationsMessagesIdPut.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(body, "ConversationsMessagesIdPutRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "ConversationsMessage");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    conversationsMessagesPost(body, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/conversations/messages';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling conversationsMessagesPost.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(body, "ConversationsMessagesPostRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "ConversationsMessage");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    conversationsPushedMessagesIdDelete(id, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/conversations/pushedMessages/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling conversationsPushedMessagesIdDelete.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    conversationsPushedMessagesIdGet(id, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/conversations/pushedMessages/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling conversationsPushedMessagesIdGet.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "ConversationsMessage");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    conversationsPushedMessagesIdPut(id, body, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/conversations/pushedMessages/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling conversationsPushedMessagesIdPut.');
            }
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling conversationsPushedMessagesIdPut.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(body, "ConversationsPushedMessagesIdPutRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "ConversationsMessage");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    conversationsPushedMessagesPost(body, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/conversations/pushedMessages';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling conversationsPushedMessagesPost.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(body, "ConversationsPushedMessagesPostRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "ConversationsMessage");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.ConversationsApi = ConversationsApi; //# sourceMappingURL=conversationsApi.js.map
}),
"[project]/node_modules/@getbrevo/brevo/dist/api/couponsApi.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __awaiter = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CouponsApi = exports.CouponsApiApiKeys = void 0;
const requestCompat_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/requestCompat.js [app-rsc] (ecmascript)"));
const models_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const models_2 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const apis_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/apis.js [app-rsc] (ecmascript)");
let defaultBasePath = 'https://api.brevo.com/v3';
var CouponsApiApiKeys;
(function(CouponsApiApiKeys) {
    CouponsApiApiKeys[CouponsApiApiKeys["apiKey"] = 0] = "apiKey";
    CouponsApiApiKeys[CouponsApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(CouponsApiApiKeys = exports.CouponsApiApiKeys || (exports.CouponsApiApiKeys = {}));
class CouponsApi {
    constructor(basePathOrUsername, password, basePath){
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'apiKey': new models_2.ApiKeyAuth('header', 'api-key'),
            'partnerKey': new models_2.ApiKeyAuth('header', 'partner-key')
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[CouponsApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    createCouponCollection(createCouponCollection, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/couponCollections';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (createCouponCollection === null || createCouponCollection === undefined) {
                throw new Error('Required parameter createCouponCollection was null or undefined when calling createCouponCollection.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(createCouponCollection, "CreateCouponCollectionRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CreateCouponCollection201Response");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    createCoupons(createCoupons, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/coupons';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (createCoupons === null || createCoupons === undefined) {
                throw new Error('Required parameter createCoupons was null or undefined when calling createCoupons.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(createCoupons, "CreateCouponsRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getCouponCollection(id, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/couponCollections/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json',
                'response'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getCouponCollection.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetCouponCollection");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getCouponCollections(limit, offset, sort, sortBy, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/couponCollections';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json',
                'response'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            if (sortBy !== undefined) {
                localVarQueryParameters['sortBy'] = models_1.ObjectSerializer.serialize(sortBy, "'createdAt' | 'remainingCoupons' | 'expirationDate'");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetCouponCollection");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    updateCouponCollection(id, updateCouponCollection, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/couponCollections/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling updateCouponCollection.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PATCH',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(updateCouponCollection, "UpdateCouponCollectionRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "UpdateCouponCollection200Response");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.CouponsApi = CouponsApi; //# sourceMappingURL=couponsApi.js.map
}),
"[project]/node_modules/@getbrevo/brevo/dist/api/dealsApi.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __awaiter = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DealsApi = exports.DealsApiApiKeys = void 0;
const requestCompat_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/requestCompat.js [app-rsc] (ecmascript)"));
const models_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const models_2 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const apis_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/apis.js [app-rsc] (ecmascript)");
let defaultBasePath = 'https://api.brevo.com/v3';
var DealsApiApiKeys;
(function(DealsApiApiKeys) {
    DealsApiApiKeys[DealsApiApiKeys["apiKey"] = 0] = "apiKey";
    DealsApiApiKeys[DealsApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(DealsApiApiKeys = exports.DealsApiApiKeys || (exports.DealsApiApiKeys = {}));
class DealsApi {
    constructor(basePathOrUsername, password, basePath){
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'apiKey': new models_2.ApiKeyAuth('header', 'api-key'),
            'partnerKey': new models_2.ApiKeyAuth('header', 'partner-key')
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[DealsApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    crmAttributesDealsGet(options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/crm/attributes/deals';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Array<DealAttributesInner>");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    crmDealsGet(filtersAttributesDealName, filtersLinkedCompaniesIds, filtersLinkedContactsIds, offset, limit, sort, sortBy, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/crm/deals';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json',
                'response'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (filtersAttributesDealName !== undefined) {
                localVarQueryParameters['filters[attributes.deal_name]'] = models_1.ObjectSerializer.serialize(filtersAttributesDealName, "string");
            }
            if (filtersLinkedCompaniesIds !== undefined) {
                localVarQueryParameters['filters[linkedCompaniesIds]'] = models_1.ObjectSerializer.serialize(filtersLinkedCompaniesIds, "string");
            }
            if (filtersLinkedContactsIds !== undefined) {
                localVarQueryParameters['filters[linkedContactsIds]'] = models_1.ObjectSerializer.serialize(filtersLinkedContactsIds, "string");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            if (sortBy !== undefined) {
                localVarQueryParameters['sortBy'] = models_1.ObjectSerializer.serialize(sortBy, "string");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "DealsList");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    crmDealsIdDelete(id, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/crm/deals/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling crmDealsIdDelete.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    crmDealsIdGet(id, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/crm/deals/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling crmDealsIdGet.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Deal");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    crmDealsIdPatch(id, body, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/crm/deals/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling crmDealsIdPatch.');
            }
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling crmDealsIdPatch.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PATCH',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(body, "CrmDealsIdPatchRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    crmDealsLinkUnlinkIdPatch(id, body, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/crm/deals/link-unlink/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json',
                'response'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling crmDealsLinkUnlinkIdPatch.');
            }
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling crmDealsLinkUnlinkIdPatch.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PATCH',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(body, "CrmDealsLinkUnlinkIdPatchRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    crmDealsPost(body, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/crm/deals';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling crmDealsPost.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(body, "CrmDealsPostRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CrmDealsPost201Response");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    crmPipelineDetailsAllGet(options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/crm/pipeline/details/all';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Array<Pipeline>");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    crmPipelineDetailsGet(options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/crm/pipeline/details';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Pipeline");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    crmPipelineDetailsPipelineIDGet(pipelineID, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/crm/pipeline/details/{pipelineID}'.replace('{' + 'pipelineID' + '}', encodeURIComponent(String(pipelineID)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (pipelineID === null || pipelineID === undefined) {
                throw new Error('Required parameter pipelineID was null or undefined when calling crmPipelineDetailsPipelineIDGet.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Array<Pipeline>");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.DealsApi = DealsApi; //# sourceMappingURL=dealsApi.js.map
}),
"[project]/node_modules/@getbrevo/brevo/dist/api/domainsApi.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __awaiter = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.DomainsApi = exports.DomainsApiApiKeys = void 0;
const requestCompat_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/requestCompat.js [app-rsc] (ecmascript)"));
const models_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const models_2 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const apis_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/apis.js [app-rsc] (ecmascript)");
let defaultBasePath = 'https://api.brevo.com/v3';
var DomainsApiApiKeys;
(function(DomainsApiApiKeys) {
    DomainsApiApiKeys[DomainsApiApiKeys["apiKey"] = 0] = "apiKey";
    DomainsApiApiKeys[DomainsApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(DomainsApiApiKeys = exports.DomainsApiApiKeys || (exports.DomainsApiApiKeys = {}));
class DomainsApi {
    constructor(basePathOrUsername, password, basePath){
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'apiKey': new models_2.ApiKeyAuth('header', 'api-key'),
            'partnerKey': new models_2.ApiKeyAuth('header', 'partner-key')
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[DomainsApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    authenticateDomain(domainName, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/senders/domains/{domainName}/authenticate'.replace('{' + 'domainName' + '}', encodeURIComponent(String(domainName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (domainName === null || domainName === undefined) {
                throw new Error('Required parameter domainName was null or undefined when calling authenticateDomain.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "AuthenticateDomainModel");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    createDomain(domainName, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/senders/domains';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(domainName, "CreateDomain")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CreateDomainModel");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    deleteDomain(domainName, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/senders/domains/{domainName}'.replace('{' + 'domainName' + '}', encodeURIComponent(String(domainName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (domainName === null || domainName === undefined) {
                throw new Error('Required parameter domainName was null or undefined when calling deleteDomain.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getDomainConfiguration(domainName, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/senders/domains/{domainName}'.replace('{' + 'domainName' + '}', encodeURIComponent(String(domainName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (domainName === null || domainName === undefined) {
                throw new Error('Required parameter domainName was null or undefined when calling getDomainConfiguration.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetDomainConfigurationModel");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getDomains(options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/senders/domains';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetDomainsList");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.DomainsApi = DomainsApi; //# sourceMappingURL=domainsApi.js.map
}),
"[project]/node_modules/@getbrevo/brevo/dist/api/ecommerceApi.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __awaiter = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.EcommerceApi = exports.EcommerceApiApiKeys = void 0;
const requestCompat_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/requestCompat.js [app-rsc] (ecmascript)"));
const models_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const models_2 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const apis_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/apis.js [app-rsc] (ecmascript)");
let defaultBasePath = 'https://api.brevo.com/v3';
var EcommerceApiApiKeys;
(function(EcommerceApiApiKeys) {
    EcommerceApiApiKeys[EcommerceApiApiKeys["apiKey"] = 0] = "apiKey";
    EcommerceApiApiKeys[EcommerceApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(EcommerceApiApiKeys = exports.EcommerceApiApiKeys || (exports.EcommerceApiApiKeys = {}));
class EcommerceApi {
    constructor(basePathOrUsername, password, basePath){
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'apiKey': new models_2.ApiKeyAuth('header', 'api-key'),
            'partnerKey': new models_2.ApiKeyAuth('header', 'partner-key')
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[EcommerceApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    createBatchOrder(orderBatch, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/orders/status/batch';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (orderBatch === null || orderBatch === undefined) {
                throw new Error('Required parameter orderBatch was null or undefined when calling createBatchOrder.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(orderBatch, "OrderBatch")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    createOrder(order, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/orders/status';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (order === null || order === undefined) {
                throw new Error('Required parameter order was null or undefined when calling createOrder.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(order, "Order")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    createUpdateBatchCategory(createUpdateBatchCategory, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/categories/batch';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (createUpdateBatchCategory === null || createUpdateBatchCategory === undefined) {
                throw new Error('Required parameter createUpdateBatchCategory was null or undefined when calling createUpdateBatchCategory.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(createUpdateBatchCategory, "CreateUpdateBatchCategory")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CreateUpdateBatchCategoryModel");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    createUpdateBatchProducts(createUpdateBatchProducts, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/products/batch';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (createUpdateBatchProducts === null || createUpdateBatchProducts === undefined) {
                throw new Error('Required parameter createUpdateBatchProducts was null or undefined when calling createUpdateBatchProducts.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(createUpdateBatchProducts, "CreateUpdateBatchProducts")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CreateUpdateBatchProductsModel");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    createUpdateCategory(createUpdateCategory, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/categories';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (createUpdateCategory === null || createUpdateCategory === undefined) {
                throw new Error('Required parameter createUpdateCategory was null or undefined when calling createUpdateCategory.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(createUpdateCategory, "CreateUpdateCategory")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CreateCategoryModel");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    createUpdateProduct(createUpdateProduct, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/products';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (createUpdateProduct === null || createUpdateProduct === undefined) {
                throw new Error('Required parameter createUpdateProduct was null or undefined when calling createUpdateProduct.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(createUpdateProduct, "CreateUpdateProduct")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CreateProductModel");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    ecommerceActivatePost(options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/ecommerce/activate';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    ecommerceAttributionMetricsConversionSourceConversionSourceIdGet(conversionSource, conversionSourceId, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/ecommerce/attribution/metrics/{conversionSource}/{conversionSourceId}'.replace('{' + 'conversionSource' + '}', encodeURIComponent(String(conversionSource))).replace('{' + 'conversionSourceId' + '}', encodeURIComponent(String(conversionSourceId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (conversionSource === null || conversionSource === undefined) {
                throw new Error('Required parameter conversionSource was null or undefined when calling ecommerceAttributionMetricsConversionSourceConversionSourceIdGet.');
            }
            if (conversionSourceId === null || conversionSourceId === undefined) {
                throw new Error('Required parameter conversionSourceId was null or undefined when calling ecommerceAttributionMetricsConversionSourceConversionSourceIdGet.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "EcommerceAttributionMetricsConversionSourceConversionSourceIdGet200Response");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    ecommerceAttributionMetricsGet(periodFrom, periodTo, emailCampaignId, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/ecommerce/attribution/metrics';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (periodFrom !== undefined) {
                localVarQueryParameters['periodFrom'] = models_1.ObjectSerializer.serialize(periodFrom, "Date");
            }
            if (periodTo !== undefined) {
                localVarQueryParameters['periodTo'] = models_1.ObjectSerializer.serialize(periodTo, "Date");
            }
            if (emailCampaignId !== undefined) {
                localVarQueryParameters['emailCampaignId[]'] = models_1.ObjectSerializer.serialize(emailCampaignId, "Array<number>");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "EcommerceAttributionMetricsGet200Response");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    ecommerceAttributionProductsConversionSourceConversionSourceIdGet(conversionSource, conversionSourceId, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/ecommerce/attribution/products/{conversionSource}/{conversionSourceId}'.replace('{' + 'conversionSource' + '}', encodeURIComponent(String(conversionSource))).replace('{' + 'conversionSourceId' + '}', encodeURIComponent(String(conversionSourceId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (conversionSource === null || conversionSource === undefined) {
                throw new Error('Required parameter conversionSource was null or undefined when calling ecommerceAttributionProductsConversionSourceConversionSourceIdGet.');
            }
            if (conversionSourceId === null || conversionSourceId === undefined) {
                throw new Error('Required parameter conversionSourceId was null or undefined when calling ecommerceAttributionProductsConversionSourceConversionSourceIdGet.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "EcommerceAttributionProductsConversionSourceConversionSourceIdGet200Response");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    ecommerceConfigDisplayCurrencyGet(options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/ecommerce/config/displayCurrency';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "EcommerceConfigDisplayCurrencyGet200Response");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getCategories(limit, offset, sort, ids, name, modifiedSince, createdSince, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/categories';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            if (ids !== undefined) {
                localVarQueryParameters['ids'] = models_1.ObjectSerializer.serialize(ids, "Array<string>");
            }
            if (name !== undefined) {
                localVarQueryParameters['name'] = models_1.ObjectSerializer.serialize(name, "string");
            }
            if (modifiedSince !== undefined) {
                localVarQueryParameters['modifiedSince'] = models_1.ObjectSerializer.serialize(modifiedSince, "string");
            }
            if (createdSince !== undefined) {
                localVarQueryParameters['createdSince'] = models_1.ObjectSerializer.serialize(createdSince, "string");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetCategories");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getCategoryInfo(id, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/categories/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getCategoryInfo.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetCategoryDetails");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getOrders(limit, offset, sort, modifiedSince, createdSince, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/orders';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json',
                'response'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            if (modifiedSince !== undefined) {
                localVarQueryParameters['modifiedSince'] = models_1.ObjectSerializer.serialize(modifiedSince, "string");
            }
            if (createdSince !== undefined) {
                localVarQueryParameters['createdSince'] = models_1.ObjectSerializer.serialize(createdSince, "string");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetOrders");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getProductInfo(id, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/products/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getProductInfo.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetProductDetails");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getProducts(limit, offset, sort, ids, name, priceLte, priceGte, priceLt, priceGt, priceEq, priceNe, categories, modifiedSince, createdSince, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/products';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            if (ids !== undefined) {
                localVarQueryParameters['ids'] = models_1.ObjectSerializer.serialize(ids, "Array<string>");
            }
            if (name !== undefined) {
                localVarQueryParameters['name'] = models_1.ObjectSerializer.serialize(name, "string");
            }
            if (priceLte !== undefined) {
                localVarQueryParameters['price[lte]'] = models_1.ObjectSerializer.serialize(priceLte, "number");
            }
            if (priceGte !== undefined) {
                localVarQueryParameters['price[gte]'] = models_1.ObjectSerializer.serialize(priceGte, "number");
            }
            if (priceLt !== undefined) {
                localVarQueryParameters['price[lt]'] = models_1.ObjectSerializer.serialize(priceLt, "number");
            }
            if (priceGt !== undefined) {
                localVarQueryParameters['price[gt]'] = models_1.ObjectSerializer.serialize(priceGt, "number");
            }
            if (priceEq !== undefined) {
                localVarQueryParameters['price[eq]'] = models_1.ObjectSerializer.serialize(priceEq, "number");
            }
            if (priceNe !== undefined) {
                localVarQueryParameters['price[ne]'] = models_1.ObjectSerializer.serialize(priceNe, "number");
            }
            if (categories !== undefined) {
                localVarQueryParameters['categories'] = models_1.ObjectSerializer.serialize(categories, "Array<string>");
            }
            if (modifiedSince !== undefined) {
                localVarQueryParameters['modifiedSince'] = models_1.ObjectSerializer.serialize(modifiedSince, "string");
            }
            if (createdSince !== undefined) {
                localVarQueryParameters['createdSince'] = models_1.ObjectSerializer.serialize(createdSince, "string");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetProducts");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    setConfigDisplayCurrency(setConfigDisplayCurrency, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/ecommerce/config/displayCurrency';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (setConfigDisplayCurrency === null || setConfigDisplayCurrency === undefined) {
                throw new Error('Required parameter setConfigDisplayCurrency was null or undefined when calling setConfigDisplayCurrency.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(setConfigDisplayCurrency, "EcommerceConfigDisplayCurrencyGet200Response")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "EcommerceConfigDisplayCurrencyGet200Response");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.EcommerceApi = EcommerceApi; //# sourceMappingURL=ecommerceApi.js.map
}),
"[project]/node_modules/@getbrevo/brevo/dist/api/emailCampaignsApi.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __awaiter = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.EmailCampaignsApi = exports.EmailCampaignsApiApiKeys = void 0;
const requestCompat_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/requestCompat.js [app-rsc] (ecmascript)"));
const models_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const models_2 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const apis_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/apis.js [app-rsc] (ecmascript)");
let defaultBasePath = 'https://api.brevo.com/v3';
var EmailCampaignsApiApiKeys;
(function(EmailCampaignsApiApiKeys) {
    EmailCampaignsApiApiKeys[EmailCampaignsApiApiKeys["apiKey"] = 0] = "apiKey";
    EmailCampaignsApiApiKeys[EmailCampaignsApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(EmailCampaignsApiApiKeys = exports.EmailCampaignsApiApiKeys || (exports.EmailCampaignsApiApiKeys = {}));
class EmailCampaignsApi {
    constructor(basePathOrUsername, password, basePath){
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'apiKey': new models_2.ApiKeyAuth('header', 'api-key'),
            'partnerKey': new models_2.ApiKeyAuth('header', 'partner-key')
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[EmailCampaignsApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    createEmailCampaign(emailCampaigns, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/emailCampaigns';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (emailCampaigns === null || emailCampaigns === undefined) {
                throw new Error('Required parameter emailCampaigns was null or undefined when calling createEmailCampaign.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                data: models_1.ObjectSerializer.serialize(emailCampaigns, "CreateEmailCampaign")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else if (response && response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = models_1.ObjectSerializer.deserialize(body, "CreateModel");
                            resolve({
                                response: response,
                                body: body
                            });
                        } else if (response) {
                            reject(new apis_1.HttpError(response, body, response.statusCode));
                        } else {
                            reject(new Error('No response received'));
                        }
                    });
                });
            });
        });
    }
    deleteEmailCampaign(campaignId, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/emailCampaigns/{campaignId}'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (campaignId === null || campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling deleteEmailCampaign.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    emailExportRecipients(campaignId, recipientExport, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/emailCampaigns/{campaignId}/exportRecipients'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (campaignId === null || campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling emailExportRecipients.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                data: models_1.ObjectSerializer.serialize(recipientExport, "EmailExportRecipients")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CreatedProcessId");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getAbTestCampaignResult(campaignId, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/emailCampaigns/{campaignId}/abTestCampaignResult'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (campaignId === null || campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling getAbTestCampaignResult.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                data: models_1.ObjectSerializer.serialize(campaignId, "number")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "AbTestCampaignResult");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getEmailCampaign(campaignId, statistics, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/emailCampaigns/{campaignId}'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (campaignId === null || campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling getEmailCampaign.');
            }
            if (statistics !== undefined) {
                localVarQueryParameters['statistics'] = models_1.ObjectSerializer.serialize(statistics, "'globalStats' | 'linksStats' | 'statsByDomain' | 'statsByDevice' | 'statsByBrowser'");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                data: models_1.ObjectSerializer.serialize(campaignId, "number")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetEmailCampaign");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getEmailCampaigns(type, status, statistics, startDate, endDate, limit, offset, sort, excludeHtmlContent, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/emailCampaigns';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json',
                'applications/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (type !== undefined) {
                localVarQueryParameters['type'] = models_1.ObjectSerializer.serialize(type, "'classic' | 'trigger'");
            }
            if (status !== undefined) {
                localVarQueryParameters['status'] = models_1.ObjectSerializer.serialize(status, "'suspended' | 'archive' | 'sent' | 'queued' | 'draft' | 'inProcess'");
            }
            if (statistics !== undefined) {
                localVarQueryParameters['statistics'] = models_1.ObjectSerializer.serialize(statistics, "'globalStats' | 'linksStats' | 'statsByDomain'");
            }
            if (startDate !== undefined) {
                localVarQueryParameters['startDate'] = models_1.ObjectSerializer.serialize(startDate, "string");
            }
            if (endDate !== undefined) {
                localVarQueryParameters['endDate'] = models_1.ObjectSerializer.serialize(endDate, "string");
            }
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            if (excludeHtmlContent !== undefined) {
                localVarQueryParameters['excludeHtmlContent'] = models_1.ObjectSerializer.serialize(excludeHtmlContent, "boolean");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetEmailCampaigns");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getSharedTemplateUrl(campaignId, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/emailCampaigns/{campaignId}/sharedUrl'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (campaignId === null || campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling getSharedTemplateUrl.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetSharedTemplateUrl");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    sendEmailCampaignNow(campaignId, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/emailCampaigns/{campaignId}/sendNow'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (campaignId === null || campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling sendEmailCampaignNow.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                data: models_1.ObjectSerializer.serialize(campaignId, "number")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    sendReport(campaignId, sendReport, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/emailCampaigns/{campaignId}/sendReport'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (campaignId === null || campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling sendReport.');
            }
            if (sendReport === null || sendReport === undefined) {
                throw new Error('Required parameter sendReport was null or undefined when calling sendReport.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                data: models_1.ObjectSerializer.serialize(sendReport, "SendReport")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    sendTestEmail(campaignId, emailTo, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/emailCampaigns/{campaignId}/sendTest'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (campaignId === null || campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling sendTestEmail.');
            }
            if (emailTo === null || emailTo === undefined) {
                throw new Error('Required parameter emailTo was null or undefined when calling sendTestEmail.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                data: models_1.ObjectSerializer.serialize(emailTo, "SendTestEmail")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    updateCampaignStatus(campaignId, status, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/emailCampaigns/{campaignId}/status'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (campaignId === null || campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling updateCampaignStatus.');
            }
            if (status === null || status === undefined) {
                throw new Error('Required parameter status was null or undefined when calling updateCampaignStatus.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                data: models_1.ObjectSerializer.serialize(status, "UpdateCampaignStatus")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    updateEmailCampaign(campaignId, emailCampaign, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/emailCampaigns/{campaignId}'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (campaignId === null || campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling updateEmailCampaign.');
            }
            if (emailCampaign === null || emailCampaign === undefined) {
                throw new Error('Required parameter emailCampaign was null or undefined when calling updateEmailCampaign.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                data: models_1.ObjectSerializer.serialize(emailCampaign, "UpdateEmailCampaign")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    uploadImageToGallery(uploadImage, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/emailCampaigns/images';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (uploadImage === null || uploadImage === undefined) {
                throw new Error('Required parameter uploadImage was null or undefined when calling uploadImageToGallery.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                data: models_1.ObjectSerializer.serialize(uploadImage, "UploadImageToGallery")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "UploadImageModel");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.EmailCampaignsApi = EmailCampaignsApi; //# sourceMappingURL=emailCampaignsApi.js.map
}),
"[project]/node_modules/@getbrevo/brevo/dist/api/eventsApi.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __awaiter = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.EventsApi = exports.EventsApiApiKeys = void 0;
const requestCompat_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/requestCompat.js [app-rsc] (ecmascript)"));
const models_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const models_2 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const apis_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/apis.js [app-rsc] (ecmascript)");
let defaultBasePath = 'https://api.brevo.com/v3';
var EventsApiApiKeys;
(function(EventsApiApiKeys) {
    EventsApiApiKeys[EventsApiApiKeys["apiKey"] = 0] = "apiKey";
    EventsApiApiKeys[EventsApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(EventsApiApiKeys = exports.EventsApiApiKeys || (exports.EventsApiApiKeys = {}));
class EventsApi {
    constructor(basePathOrUsername, password, basePath){
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'apiKey': new models_2.ApiKeyAuth('header', 'api-key'),
            'partnerKey': new models_2.ApiKeyAuth('header', 'partner-key')
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[EventsApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    createEvent(event, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/events';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (event === null || event === undefined) {
                throw new Error('Required parameter event was null or undefined when calling createEvent.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(event, "Event")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.EventsApi = EventsApi; //# sourceMappingURL=eventsApi.js.map
}),
"[project]/node_modules/@getbrevo/brevo/dist/api/externalFeedsApi.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __awaiter = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ExternalFeedsApi = exports.ExternalFeedsApiApiKeys = void 0;
const requestCompat_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/requestCompat.js [app-rsc] (ecmascript)"));
const models_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const models_2 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const apis_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/apis.js [app-rsc] (ecmascript)");
let defaultBasePath = 'https://api.brevo.com/v3';
var ExternalFeedsApiApiKeys;
(function(ExternalFeedsApiApiKeys) {
    ExternalFeedsApiApiKeys[ExternalFeedsApiApiKeys["apiKey"] = 0] = "apiKey";
    ExternalFeedsApiApiKeys[ExternalFeedsApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(ExternalFeedsApiApiKeys = exports.ExternalFeedsApiApiKeys || (exports.ExternalFeedsApiApiKeys = {}));
class ExternalFeedsApi {
    constructor(basePathOrUsername, password, basePath){
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'apiKey': new models_2.ApiKeyAuth('header', 'api-key'),
            'partnerKey': new models_2.ApiKeyAuth('header', 'partner-key')
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ExternalFeedsApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    createExternalFeed(createExternalFeed, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/feeds';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (createExternalFeed === null || createExternalFeed === undefined) {
                throw new Error('Required parameter createExternalFeed was null or undefined when calling createExternalFeed.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(createExternalFeed, "CreateExternalFeed")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CreateExternalFeed201Response");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    deleteExternalFeed(uuid, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/feeds/{uuid}'.replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (uuid === null || uuid === undefined) {
                throw new Error('Required parameter uuid was null or undefined when calling deleteExternalFeed.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getAllExternalFeeds(search, startDate, endDate, sort, authType, limit, offset, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/feeds';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (search !== undefined) {
                localVarQueryParameters['search'] = models_1.ObjectSerializer.serialize(search, "string");
            }
            if (startDate !== undefined) {
                localVarQueryParameters['startDate'] = models_1.ObjectSerializer.serialize(startDate, "string");
            }
            if (endDate !== undefined) {
                localVarQueryParameters['endDate'] = models_1.ObjectSerializer.serialize(endDate, "string");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            if (authType !== undefined) {
                localVarQueryParameters['authType'] = models_1.ObjectSerializer.serialize(authType, "'basic' | 'token' | 'noAuth'");
            }
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetAllExternalFeeds");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getExternalFeedByUUID(uuid, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/feeds/{uuid}'.replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (uuid === null || uuid === undefined) {
                throw new Error('Required parameter uuid was null or undefined when calling getExternalFeedByUUID.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetExternalFeedByUUID");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    updateExternalFeed(uuid, updateExternalFeed, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/feeds/{uuid}'.replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (uuid === null || uuid === undefined) {
                throw new Error('Required parameter uuid was null or undefined when calling updateExternalFeed.');
            }
            if (updateExternalFeed === null || updateExternalFeed === undefined) {
                throw new Error('Required parameter updateExternalFeed was null or undefined when calling updateExternalFeed.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(updateExternalFeed, "UpdateExternalFeed")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.ExternalFeedsApi = ExternalFeedsApi; //# sourceMappingURL=externalFeedsApi.js.map
}),
"[project]/node_modules/@getbrevo/brevo/dist/api/filesApi.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __awaiter = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.FilesApi = exports.FilesApiApiKeys = void 0;
const requestCompat_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/requestCompat.js [app-rsc] (ecmascript)"));
const models_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const models_2 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const apis_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/apis.js [app-rsc] (ecmascript)");
let defaultBasePath = 'https://api.brevo.com/v3';
var FilesApiApiKeys;
(function(FilesApiApiKeys) {
    FilesApiApiKeys[FilesApiApiKeys["apiKey"] = 0] = "apiKey";
    FilesApiApiKeys[FilesApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(FilesApiApiKeys = exports.FilesApiApiKeys || (exports.FilesApiApiKeys = {}));
class FilesApi {
    constructor(basePathOrUsername, password, basePath){
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'apiKey': new models_2.ApiKeyAuth('header', 'api-key'),
            'partnerKey': new models_2.ApiKeyAuth('header', 'partner-key')
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[FilesApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    crmFilesGet(entity, entityIds, dateFrom, dateTo, offset, limit, sort, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/crm/files';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (entity !== undefined) {
                localVarQueryParameters['entity'] = models_1.ObjectSerializer.serialize(entity, "'companies' | 'deals' | 'contacts'");
            }
            if (entityIds !== undefined) {
                localVarQueryParameters['entityIds'] = models_1.ObjectSerializer.serialize(entityIds, "string");
            }
            if (dateFrom !== undefined) {
                localVarQueryParameters['dateFrom'] = models_1.ObjectSerializer.serialize(dateFrom, "number");
            }
            if (dateTo !== undefined) {
                localVarQueryParameters['dateTo'] = models_1.ObjectSerializer.serialize(dateTo, "number");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Array<FileData>");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    crmFilesIdDataGet(id, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/crm/files/{id}/data'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling crmFilesIdDataGet.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "FileData");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    crmFilesIdDelete(id, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/crm/files/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling crmFilesIdDelete.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    crmFilesIdGet(id, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/crm/files/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling crmFilesIdGet.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "FileDownloadableLink");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    crmFilesPost(file, dealId, contactId, companyId, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/crm/files';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (file === null || file === undefined) {
                throw new Error('Required parameter file was null or undefined when calling crmFilesPost.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            if (file !== undefined) {
                localVarFormParams['file'] = file;
            }
            localVarUseFormData = true;
            if (dealId !== undefined) {
                localVarFormParams['dealId'] = models_1.ObjectSerializer.serialize(dealId, "string");
            }
            if (contactId !== undefined) {
                localVarFormParams['contactId'] = models_1.ObjectSerializer.serialize(contactId, "number");
            }
            if (companyId !== undefined) {
                localVarFormParams['companyId'] = models_1.ObjectSerializer.serialize(companyId, "string");
            }
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    } else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "FileData");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.FilesApi = FilesApi; //# sourceMappingURL=filesApi.js.map
}),
"[project]/node_modules/@getbrevo/brevo/dist/api/inboundParsingApi.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __awaiter = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InboundParsingApi = exports.InboundParsingApiApiKeys = void 0;
const requestCompat_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/requestCompat.js [app-rsc] (ecmascript)"));
const models_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const models_2 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const apis_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/apis.js [app-rsc] (ecmascript)");
let defaultBasePath = 'https://api.brevo.com/v3';
var InboundParsingApiApiKeys;
(function(InboundParsingApiApiKeys) {
    InboundParsingApiApiKeys[InboundParsingApiApiKeys["apiKey"] = 0] = "apiKey";
    InboundParsingApiApiKeys[InboundParsingApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(InboundParsingApiApiKeys = exports.InboundParsingApiApiKeys || (exports.InboundParsingApiApiKeys = {}));
class InboundParsingApi {
    constructor(basePathOrUsername, password, basePath){
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'apiKey': new models_2.ApiKeyAuth('header', 'api-key'),
            'partnerKey': new models_2.ApiKeyAuth('header', 'partner-key')
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[InboundParsingApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    getInboundEmailAttachment(downloadToken, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/inbound/attachments/{downloadToken}'.replace('{' + 'downloadToken' + '}', encodeURIComponent(String(downloadToken)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (downloadToken === null || downloadToken === undefined) {
                throw new Error('Required parameter downloadToken was null or undefined when calling getInboundEmailAttachment.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                encoding: null
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Buffer");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getInboundEmailEvents(sender, startDate, endDate, limit, offset, sort, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/inbound/events';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (sender !== undefined) {
                localVarQueryParameters['sender'] = models_1.ObjectSerializer.serialize(sender, "string");
            }
            if (startDate !== undefined) {
                localVarQueryParameters['startDate'] = models_1.ObjectSerializer.serialize(startDate, "string");
            }
            if (endDate !== undefined) {
                localVarQueryParameters['endDate'] = models_1.ObjectSerializer.serialize(endDate, "string");
            }
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetInboundEmailEvents");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getInboundEmailEventsByUuid(uuid, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/inbound/events/{uuid}'.replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (uuid === null || uuid === undefined) {
                throw new Error('Required parameter uuid was null or undefined when calling getInboundEmailEventsByUuid.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetInboundEmailEventsByUuid");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.InboundParsingApi = InboundParsingApi; //# sourceMappingURL=inboundParsingApi.js.map
}),
"[project]/node_modules/@getbrevo/brevo/dist/api/masterAccountApi.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __awaiter = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MasterAccountApi = exports.MasterAccountApiApiKeys = void 0;
const requestCompat_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/requestCompat.js [app-rsc] (ecmascript)"));
const models_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const models_2 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const apis_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/apis.js [app-rsc] (ecmascript)");
let defaultBasePath = 'https://api.brevo.com/v3';
var MasterAccountApiApiKeys;
(function(MasterAccountApiApiKeys) {
    MasterAccountApiApiKeys[MasterAccountApiApiKeys["apiKey"] = 0] = "apiKey";
    MasterAccountApiApiKeys[MasterAccountApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(MasterAccountApiApiKeys = exports.MasterAccountApiApiKeys || (exports.MasterAccountApiApiKeys = {}));
class MasterAccountApi {
    constructor(basePathOrUsername, password, basePath){
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'apiKey': new models_2.ApiKeyAuth('header', 'api-key'),
            'partnerKey': new models_2.ApiKeyAuth('header', 'partner-key')
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[MasterAccountApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    corporateGroupIdDelete(id, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/corporate/group/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling corporateGroupIdDelete.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    corporateGroupIdGet(id, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/corporate/group/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling corporateGroupIdGet.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CorporateGroupDetailsResponse");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    corporateGroupIdPut(id, body, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/corporate/group/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling corporateGroupIdPut.');
            }
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling corporateGroupIdPut.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(body, "CorporateGroupPostRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    corporateGroupPost(body, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/corporate/group';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling corporateGroupPost.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(body, "CorporateGroupPostRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CorporateGroupPost201Response");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    corporateGroupUnlinkGroupIdSubAccountsPut(groupId, body, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/corporate/group/unlink/{groupId}/subAccounts'.replace('{' + 'groupId' + '}', encodeURIComponent(String(groupId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (groupId === null || groupId === undefined) {
                throw new Error('Required parameter groupId was null or undefined when calling corporateGroupUnlinkGroupIdSubAccountsPut.');
            }
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling corporateGroupUnlinkGroupIdSubAccountsPut.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(body, "CorporateGroupUnlinkGroupIdSubAccountsPutRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    corporateMasterAccountGet(options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/corporate/masterAccount';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "MasterDetailsResponse");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    corporateSsoTokenPost(ssoTokenRequestCorporate, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/corporate/ssoToken';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (ssoTokenRequestCorporate === null || ssoTokenRequestCorporate === undefined) {
                throw new Error('Required parameter ssoTokenRequestCorporate was null or undefined when calling corporateSsoTokenPost.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(ssoTokenRequestCorporate, "SsoTokenRequestCorporate")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetSsoToken");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    corporateSubAccountGet(offset, limit, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/corporate/subAccount';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (offset === null || offset === undefined) {
                throw new Error('Required parameter offset was null or undefined when calling corporateSubAccountGet.');
            }
            if (limit === null || limit === undefined) {
                throw new Error('Required parameter limit was null or undefined when calling corporateSubAccountGet.');
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "SubAccountsResponse");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    corporateSubAccountIdApplicationsTogglePut(id, toggleApplications, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/corporate/subAccount/{id}/applications/toggle'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling corporateSubAccountIdApplicationsTogglePut.');
            }
            if (toggleApplications === null || toggleApplications === undefined) {
                throw new Error('Required parameter toggleApplications was null or undefined when calling corporateSubAccountIdApplicationsTogglePut.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(toggleApplications, "SubAccountAppsToggleRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    corporateSubAccountIdDelete(id, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/corporate/subAccount/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling corporateSubAccountIdDelete.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    corporateSubAccountIdGet(id, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/corporate/subAccount/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling corporateSubAccountIdGet.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "SubAccountDetailsResponse");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    corporateSubAccountIdPlanPut(id, updatePlanDetails, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/corporate/subAccount/{id}/plan'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling corporateSubAccountIdPlanPut.');
            }
            if (updatePlanDetails === null || updatePlanDetails === undefined) {
                throw new Error('Required parameter updatePlanDetails was null or undefined when calling corporateSubAccountIdPlanPut.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(updatePlanDetails, "SubAccountUpdatePlanRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    corporateSubAccountIpAssociatePost(body, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/corporate/subAccount/ip/associate';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling corporateSubAccountIpAssociatePost.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(body, "CorporateSubAccountIpAssociatePostRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "object");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    corporateSubAccountIpDissociatePut(body, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/corporate/subAccount/ip/dissociate';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling corporateSubAccountIpDissociatePut.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(body, "CorporateSubAccountIpDissociatePutRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    corporateSubAccountKeyPost(createApiKeyRequest, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/corporate/subAccount/key';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (createApiKeyRequest === null || createApiKeyRequest === undefined) {
                throw new Error('Required parameter createApiKeyRequest was null or undefined when calling corporateSubAccountKeyPost.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(createApiKeyRequest, "CreateApiKeyRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CreateApiKeyResponse");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    corporateSubAccountPost(subAccountCreate, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/corporate/subAccount';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (subAccountCreate === null || subAccountCreate === undefined) {
                throw new Error('Required parameter subAccountCreate was null or undefined when calling corporateSubAccountPost.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(subAccountCreate, "CreateSubAccount")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CreateSubAccountResponse");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    corporateSubAccountSsoTokenPost(ssoTokenRequest, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/corporate/subAccount/ssoToken';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (ssoTokenRequest === null || ssoTokenRequest === undefined) {
                throw new Error('Required parameter ssoTokenRequest was null or undefined when calling corporateSubAccountSsoTokenPost.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(ssoTokenRequest, "SsoTokenRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetSsoToken");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    corporateUserInvitationActionEmailPut(action, email, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/corporate/user/invitation/{action}/{email}'.replace('{' + 'action' + '}', encodeURIComponent(String(action))).replace('{' + 'email' + '}', encodeURIComponent(String(email)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (action === null || action === undefined) {
                throw new Error('Required parameter action was null or undefined when calling corporateUserInvitationActionEmailPut.');
            }
            if (email === null || email === undefined) {
                throw new Error('Required parameter email was null or undefined when calling corporateUserInvitationActionEmailPut.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CorporateUserInvitationActionEmailPut200Response");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    corporateUserRevokeEmailDelete(email, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/corporate/user/revoke/{email}'.replace('{' + 'email' + '}', encodeURIComponent(String(email)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (email === null || email === undefined) {
                throw new Error('Required parameter email was null or undefined when calling corporateUserRevokeEmailDelete.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getAccountActivity(startDate, endDate, limit, offset, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/organization/activities';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (startDate !== undefined) {
                localVarQueryParameters['startDate'] = models_1.ObjectSerializer.serialize(startDate, "string");
            }
            if (endDate !== undefined) {
                localVarQueryParameters['endDate'] = models_1.ObjectSerializer.serialize(endDate, "string");
            }
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetAccountActivity");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getCorporateInvitedUsersList(options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/corporate/invited/users';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetCorporateInvitedUsersList");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getCorporateUserPermission(email, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/corporate/user/{email}/permissions'.replace('{' + 'email' + '}', encodeURIComponent(String(email)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (email === null || email === undefined) {
                throw new Error('Required parameter email was null or undefined when calling getCorporateUserPermission.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetCorporateUserPermission");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getSubAccountGroups(options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/corporate/groups';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Array<GetSubAccountGroups200ResponseInner>");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    inviteAdminUser(sendInvitation, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/corporate/user/invitation/send';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (sendInvitation === null || sendInvitation === undefined) {
                throw new Error('Required parameter sendInvitation was null or undefined when calling inviteAdminUser.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(sendInvitation, "InviteAdminUser")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "InviteAdminUser");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.MasterAccountApi = MasterAccountApi; //# sourceMappingURL=masterAccountApi.js.map
}),
"[project]/node_modules/@getbrevo/brevo/dist/api/notesApi.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __awaiter = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NotesApi = exports.NotesApiApiKeys = void 0;
const requestCompat_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/requestCompat.js [app-rsc] (ecmascript)"));
const models_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const models_2 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const apis_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/apis.js [app-rsc] (ecmascript)");
let defaultBasePath = 'https://api.brevo.com/v3';
var NotesApiApiKeys;
(function(NotesApiApiKeys) {
    NotesApiApiKeys[NotesApiApiKeys["apiKey"] = 0] = "apiKey";
    NotesApiApiKeys[NotesApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(NotesApiApiKeys = exports.NotesApiApiKeys || (exports.NotesApiApiKeys = {}));
class NotesApi {
    constructor(basePathOrUsername, password, basePath){
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'apiKey': new models_2.ApiKeyAuth('header', 'api-key'),
            'partnerKey': new models_2.ApiKeyAuth('header', 'partner-key')
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[NotesApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    crmNotesGet(entity, entityIds, dateFrom, dateTo, offset, limit, sort, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/crm/notes';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json',
                'response'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (entity !== undefined) {
                localVarQueryParameters['entity'] = models_1.ObjectSerializer.serialize(entity, "'companies' | 'deals' | 'contacts'");
            }
            if (entityIds !== undefined) {
                localVarQueryParameters['entityIds'] = models_1.ObjectSerializer.serialize(entityIds, "string");
            }
            if (dateFrom !== undefined) {
                localVarQueryParameters['dateFrom'] = models_1.ObjectSerializer.serialize(dateFrom, "number");
            }
            if (dateTo !== undefined) {
                localVarQueryParameters['dateTo'] = models_1.ObjectSerializer.serialize(dateTo, "number");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Array<Note>");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    crmNotesIdDelete(id, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/crm/notes/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling crmNotesIdDelete.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    crmNotesIdGet(id, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/crm/notes/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling crmNotesIdGet.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Note");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    crmNotesIdPatch(id, body, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/crm/notes/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling crmNotesIdPatch.');
            }
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling crmNotesIdPatch.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PATCH',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(body, "NoteData")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    crmNotesPost(body, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/crm/notes';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling crmNotesPost.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(body, "NoteData")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "NoteId");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.NotesApi = NotesApi; //# sourceMappingURL=notesApi.js.map
}),
"[project]/node_modules/@getbrevo/brevo/dist/api/paymentsApi.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __awaiter = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PaymentsApi = exports.PaymentsApiApiKeys = void 0;
const requestCompat_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/requestCompat.js [app-rsc] (ecmascript)"));
const models_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const models_2 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const apis_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/apis.js [app-rsc] (ecmascript)");
let defaultBasePath = 'https://api.brevo.com/v3';
var PaymentsApiApiKeys;
(function(PaymentsApiApiKeys) {
    PaymentsApiApiKeys[PaymentsApiApiKeys["apiKey"] = 0] = "apiKey";
    PaymentsApiApiKeys[PaymentsApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(PaymentsApiApiKeys = exports.PaymentsApiApiKeys || (exports.PaymentsApiApiKeys = {}));
class PaymentsApi {
    constructor(basePathOrUsername, password, basePath){
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'apiKey': new models_2.ApiKeyAuth('header', 'api-key'),
            'partnerKey': new models_2.ApiKeyAuth('header', 'partner-key')
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[PaymentsApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    createPaymentRequest(createPaymentRquest, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/payments/requests';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json',
                'response'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (createPaymentRquest === null || createPaymentRquest === undefined) {
                throw new Error('Required parameter createPaymentRquest was null or undefined when calling createPaymentRequest.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(createPaymentRquest, "CreatePaymentRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CreatePaymentResponse");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    deletePaymentRequest(id, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/payments/requests/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling deletePaymentRequest.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getPaymentRequest(id, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/payments/requests/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getPaymentRequest.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetPaymentRequest");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.PaymentsApi = PaymentsApi; //# sourceMappingURL=paymentsApi.js.map
}),
"[project]/node_modules/@getbrevo/brevo/dist/api/processApi.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __awaiter = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ProcessApi = exports.ProcessApiApiKeys = void 0;
const requestCompat_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/requestCompat.js [app-rsc] (ecmascript)"));
const models_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const models_2 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const apis_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/apis.js [app-rsc] (ecmascript)");
let defaultBasePath = 'https://api.brevo.com/v3';
var ProcessApiApiKeys;
(function(ProcessApiApiKeys) {
    ProcessApiApiKeys[ProcessApiApiKeys["apiKey"] = 0] = "apiKey";
    ProcessApiApiKeys[ProcessApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(ProcessApiApiKeys = exports.ProcessApiApiKeys || (exports.ProcessApiApiKeys = {}));
class ProcessApi {
    constructor(basePathOrUsername, password, basePath){
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'apiKey': new models_2.ApiKeyAuth('header', 'api-key'),
            'partnerKey': new models_2.ApiKeyAuth('header', 'partner-key')
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ProcessApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    getProcess(processId, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/processes/{processId}'.replace('{' + 'processId' + '}', encodeURIComponent(String(processId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (processId === null || processId === undefined) {
                throw new Error('Required parameter processId was null or undefined when calling getProcess.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetProcess");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getProcesses(limit, offset, sort, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/processes';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetProcesses");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.ProcessApi = ProcessApi; //# sourceMappingURL=processApi.js.map
}),
"[project]/node_modules/@getbrevo/brevo/dist/api/resellerApi.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __awaiter = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ResellerApi = exports.ResellerApiApiKeys = void 0;
const requestCompat_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/requestCompat.js [app-rsc] (ecmascript)"));
const models_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const models_2 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const apis_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/apis.js [app-rsc] (ecmascript)");
let defaultBasePath = 'https://api.brevo.com/v3';
var ResellerApiApiKeys;
(function(ResellerApiApiKeys) {
    ResellerApiApiKeys[ResellerApiApiKeys["apiKey"] = 0] = "apiKey";
    ResellerApiApiKeys[ResellerApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(ResellerApiApiKeys = exports.ResellerApiApiKeys || (exports.ResellerApiApiKeys = {}));
class ResellerApi {
    constructor(basePathOrUsername, password, basePath){
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'apiKey': new models_2.ApiKeyAuth('header', 'api-key'),
            'partnerKey': new models_2.ApiKeyAuth('header', 'partner-key')
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ResellerApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    addCredits(childIdentifier, addCredits, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/reseller/children/{childIdentifier}/credits/add'.replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (childIdentifier === null || childIdentifier === undefined) {
                throw new Error('Required parameter childIdentifier was null or undefined when calling addCredits.');
            }
            if (addCredits === null || addCredits === undefined) {
                throw new Error('Required parameter addCredits was null or undefined when calling addCredits.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(addCredits, "AddCredits")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "RemainingCreditModel");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    associateIpToChild(childIdentifier, ip, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/reseller/children/{childIdentifier}/ips/associate'.replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (childIdentifier === null || childIdentifier === undefined) {
                throw new Error('Required parameter childIdentifier was null or undefined when calling associateIpToChild.');
            }
            if (ip === null || ip === undefined) {
                throw new Error('Required parameter ip was null or undefined when calling associateIpToChild.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(ip, "ManageIp")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    createChildDomain(childIdentifier, addChildDomain, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/reseller/children/{childIdentifier}/domains'.replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (childIdentifier === null || childIdentifier === undefined) {
                throw new Error('Required parameter childIdentifier was null or undefined when calling createChildDomain.');
            }
            if (addChildDomain === null || addChildDomain === undefined) {
                throw new Error('Required parameter addChildDomain was null or undefined when calling createChildDomain.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(addChildDomain, "AddChildDomain")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    createResellerChild(resellerChild, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/reseller/children';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(resellerChild, "CreateChild")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CreateReseller");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    deleteChildDomain(childIdentifier, domainName, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/reseller/children/{childIdentifier}/domains/{domainName}'.replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier))).replace('{' + 'domainName' + '}', encodeURIComponent(String(domainName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (childIdentifier === null || childIdentifier === undefined) {
                throw new Error('Required parameter childIdentifier was null or undefined when calling deleteChildDomain.');
            }
            if (domainName === null || domainName === undefined) {
                throw new Error('Required parameter domainName was null or undefined when calling deleteChildDomain.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    deleteResellerChild(childIdentifier, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/reseller/children/{childIdentifier}'.replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (childIdentifier === null || childIdentifier === undefined) {
                throw new Error('Required parameter childIdentifier was null or undefined when calling deleteResellerChild.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    dissociateIpFromChild(childIdentifier, ip, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/reseller/children/{childIdentifier}/ips/dissociate'.replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (childIdentifier === null || childIdentifier === undefined) {
                throw new Error('Required parameter childIdentifier was null or undefined when calling dissociateIpFromChild.');
            }
            if (ip === null || ip === undefined) {
                throw new Error('Required parameter ip was null or undefined when calling dissociateIpFromChild.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(ip, "ManageIp")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getChildAccountCreationStatus(childIdentifier, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/reseller/children/{childIdentifier}/accountCreationStatus'.replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (childIdentifier === null || childIdentifier === undefined) {
                throw new Error('Required parameter childIdentifier was null or undefined when calling getChildAccountCreationStatus.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetChildAccountCreationStatus");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getChildDomains(childIdentifier, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/reseller/children/{childIdentifier}/domains'.replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (childIdentifier === null || childIdentifier === undefined) {
                throw new Error('Required parameter childIdentifier was null or undefined when calling getChildDomains.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Array<GetChildDomain>");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getChildInfo(childIdentifier, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/reseller/children/{childIdentifier}'.replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (childIdentifier === null || childIdentifier === undefined) {
                throw new Error('Required parameter childIdentifier was null or undefined when calling getChildInfo.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetChildInfo");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getResellerChilds(limit, offset, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/reseller/children';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetChildrenList");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getSsoToken(childIdentifier, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/reseller/children/{childIdentifier}/auth'.replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (childIdentifier === null || childIdentifier === undefined) {
                throw new Error('Required parameter childIdentifier was null or undefined when calling getSsoToken.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetSsoToken");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    removeCredits(childIdentifier, removeCredits, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/reseller/children/{childIdentifier}/credits/remove'.replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (childIdentifier === null || childIdentifier === undefined) {
                throw new Error('Required parameter childIdentifier was null or undefined when calling removeCredits.');
            }
            if (removeCredits === null || removeCredits === undefined) {
                throw new Error('Required parameter removeCredits was null or undefined when calling removeCredits.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(removeCredits, "RemoveCredits")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "RemainingCreditModel");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    updateChildAccountStatus(childIdentifier, updateChildAccountStatus, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/reseller/children/{childIdentifier}/accountStatus'.replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (childIdentifier === null || childIdentifier === undefined) {
                throw new Error('Required parameter childIdentifier was null or undefined when calling updateChildAccountStatus.');
            }
            if (updateChildAccountStatus === null || updateChildAccountStatus === undefined) {
                throw new Error('Required parameter updateChildAccountStatus was null or undefined when calling updateChildAccountStatus.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(updateChildAccountStatus, "UpdateChildAccountStatus")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    updateChildDomain(childIdentifier, domainName, updateChildDomain, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/reseller/children/{childIdentifier}/domains/{domainName}'.replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier))).replace('{' + 'domainName' + '}', encodeURIComponent(String(domainName)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (childIdentifier === null || childIdentifier === undefined) {
                throw new Error('Required parameter childIdentifier was null or undefined when calling updateChildDomain.');
            }
            if (domainName === null || domainName === undefined) {
                throw new Error('Required parameter domainName was null or undefined when calling updateChildDomain.');
            }
            if (updateChildDomain === null || updateChildDomain === undefined) {
                throw new Error('Required parameter updateChildDomain was null or undefined when calling updateChildDomain.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(updateChildDomain, "UpdateChildDomain")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    updateResellerChild(childIdentifier, resellerChild, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/reseller/children/{childIdentifier}'.replace('{' + 'childIdentifier' + '}', encodeURIComponent(String(childIdentifier)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (childIdentifier === null || childIdentifier === undefined) {
                throw new Error('Required parameter childIdentifier was null or undefined when calling updateResellerChild.');
            }
            if (resellerChild === null || resellerChild === undefined) {
                throw new Error('Required parameter resellerChild was null or undefined when calling updateResellerChild.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(resellerChild, "UpdateChild")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.ResellerApi = ResellerApi; //# sourceMappingURL=resellerApi.js.map
}),
"[project]/node_modules/@getbrevo/brevo/dist/api/sMSCampaignsApi.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __awaiter = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SMSCampaignsApi = exports.SMSCampaignsApiApiKeys = void 0;
const requestCompat_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/requestCompat.js [app-rsc] (ecmascript)"));
const models_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const models_2 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const apis_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/apis.js [app-rsc] (ecmascript)");
let defaultBasePath = 'https://api.brevo.com/v3';
var SMSCampaignsApiApiKeys;
(function(SMSCampaignsApiApiKeys) {
    SMSCampaignsApiApiKeys[SMSCampaignsApiApiKeys["apiKey"] = 0] = "apiKey";
    SMSCampaignsApiApiKeys[SMSCampaignsApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(SMSCampaignsApiApiKeys = exports.SMSCampaignsApiApiKeys || (exports.SMSCampaignsApiApiKeys = {}));
class SMSCampaignsApi {
    constructor(basePathOrUsername, password, basePath){
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'apiKey': new models_2.ApiKeyAuth('header', 'api-key'),
            'partnerKey': new models_2.ApiKeyAuth('header', 'partner-key')
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[SMSCampaignsApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    createSmsCampaign(createSmsCampaign, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smsCampaigns';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (createSmsCampaign === null || createSmsCampaign === undefined) {
                throw new Error('Required parameter createSmsCampaign was null or undefined when calling createSmsCampaign.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(createSmsCampaign, "CreateSmsCampaign")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CreateModel");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    deleteSmsCampaign(campaignId, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smsCampaigns/{campaignId}'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (campaignId === null || campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling deleteSmsCampaign.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getSmsCampaign(campaignId, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smsCampaigns/{campaignId}'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (campaignId === null || campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling getSmsCampaign.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetSmsCampaign");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getSmsCampaigns(status, startDate, endDate, limit, offset, sort, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smsCampaigns';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (status !== undefined) {
                localVarQueryParameters['status'] = models_1.ObjectSerializer.serialize(status, "'suspended' | 'archive' | 'sent' | 'queued' | 'draft' | 'inProcess'");
            }
            if (startDate !== undefined) {
                localVarQueryParameters['startDate'] = models_1.ObjectSerializer.serialize(startDate, "string");
            }
            if (endDate !== undefined) {
                localVarQueryParameters['endDate'] = models_1.ObjectSerializer.serialize(endDate, "string");
            }
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetSmsCampaigns");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    requestSmsRecipientExport(campaignId, recipientExport, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smsCampaigns/{campaignId}/exportRecipients'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (campaignId === null || campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling requestSmsRecipientExport.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(recipientExport, "RequestSmsRecipientExport")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CreatedProcessId");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    sendSmsCampaignNow(campaignId, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smsCampaigns/{campaignId}/sendNow'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (campaignId === null || campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling sendSmsCampaignNow.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    sendSmsReport(campaignId, sendReport, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smsCampaigns/{campaignId}/sendReport'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (campaignId === null || campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling sendSmsReport.');
            }
            if (sendReport === null || sendReport === undefined) {
                throw new Error('Required parameter sendReport was null or undefined when calling sendSmsReport.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(sendReport, "SendReport")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    sendTestSms(campaignId, phoneNumber, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smsCampaigns/{campaignId}/sendTest'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (campaignId === null || campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling sendTestSms.');
            }
            if (phoneNumber === null || phoneNumber === undefined) {
                throw new Error('Required parameter phoneNumber was null or undefined when calling sendTestSms.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(phoneNumber, "SendTestSms")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    updateSmsCampaign(campaignId, updateSmsCampaign, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smsCampaigns/{campaignId}'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (campaignId === null || campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling updateSmsCampaign.');
            }
            if (updateSmsCampaign === null || updateSmsCampaign === undefined) {
                throw new Error('Required parameter updateSmsCampaign was null or undefined when calling updateSmsCampaign.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(updateSmsCampaign, "UpdateSmsCampaign")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    updateSmsCampaignStatus(campaignId, status, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smsCampaigns/{campaignId}/status'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (campaignId === null || campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling updateSmsCampaignStatus.');
            }
            if (status === null || status === undefined) {
                throw new Error('Required parameter status was null or undefined when calling updateSmsCampaignStatus.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                params: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(status, "UpdateCampaignStatus")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.SMSCampaignsApi = SMSCampaignsApi; //# sourceMappingURL=sMSCampaignsApi.js.map
}),
"[project]/node_modules/@getbrevo/brevo/dist/api/sendersApi.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __awaiter = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SendersApi = exports.SendersApiApiKeys = void 0;
const requestCompat_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/requestCompat.js [app-rsc] (ecmascript)"));
const models_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const models_2 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const apis_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/apis.js [app-rsc] (ecmascript)");
let defaultBasePath = 'https://api.brevo.com/v3';
var SendersApiApiKeys;
(function(SendersApiApiKeys) {
    SendersApiApiKeys[SendersApiApiKeys["apiKey"] = 0] = "apiKey";
    SendersApiApiKeys[SendersApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(SendersApiApiKeys = exports.SendersApiApiKeys || (exports.SendersApiApiKeys = {}));
class SendersApi {
    constructor(basePathOrUsername, password, basePath){
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'apiKey': new models_2.ApiKeyAuth('header', 'api-key'),
            'partnerKey': new models_2.ApiKeyAuth('header', 'partner-key')
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[SendersApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    createSender(sender, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/senders';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(sender, "CreateSender")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CreateSenderModel");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    deleteSender(senderId, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/senders/{senderId}'.replace('{' + 'senderId' + '}', encodeURIComponent(String(senderId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (senderId === null || senderId === undefined) {
                throw new Error('Required parameter senderId was null or undefined when calling deleteSender.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getIps(options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/senders/ips';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetIps");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getIpsFromSender(senderId, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/senders/{senderId}/ips'.replace('{' + 'senderId' + '}', encodeURIComponent(String(senderId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (senderId === null || senderId === undefined) {
                throw new Error('Required parameter senderId was null or undefined when calling getIpsFromSender.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetIpsFromSender");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getSenders(ip, domain, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/senders';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (ip !== undefined) {
                localVarQueryParameters['ip'] = models_1.ObjectSerializer.serialize(ip, "string");
            }
            if (domain !== undefined) {
                localVarQueryParameters['domain'] = models_1.ObjectSerializer.serialize(domain, "string");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetSendersList");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    updateSender(senderId, sender, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/senders/{senderId}'.replace('{' + 'senderId' + '}', encodeURIComponent(String(senderId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (senderId === null || senderId === undefined) {
                throw new Error('Required parameter senderId was null or undefined when calling updateSender.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(sender, "UpdateSender")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    validateSenderByOTP(senderId, otp, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/senders/{senderId}/validate'.replace('{' + 'senderId' + '}', encodeURIComponent(String(senderId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (senderId === null || senderId === undefined) {
                throw new Error('Required parameter senderId was null or undefined when calling validateSenderByOTP.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(otp, "Otp")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.SendersApi = SendersApi; //# sourceMappingURL=sendersApi.js.map
}),
"[project]/node_modules/@getbrevo/brevo/dist/api/tasksApi.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __awaiter = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TasksApi = exports.TasksApiApiKeys = void 0;
const requestCompat_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/requestCompat.js [app-rsc] (ecmascript)"));
const models_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const models_2 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const apis_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/apis.js [app-rsc] (ecmascript)");
let defaultBasePath = 'https://api.brevo.com/v3';
var TasksApiApiKeys;
(function(TasksApiApiKeys) {
    TasksApiApiKeys[TasksApiApiKeys["apiKey"] = 0] = "apiKey";
    TasksApiApiKeys[TasksApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(TasksApiApiKeys = exports.TasksApiApiKeys || (exports.TasksApiApiKeys = {}));
class TasksApi {
    constructor(basePathOrUsername, password, basePath){
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'apiKey': new models_2.ApiKeyAuth('header', 'api-key'),
            'partnerKey': new models_2.ApiKeyAuth('header', 'partner-key')
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[TasksApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    crmTasksGet(filterType, filterStatus, filterDate, filterAssignTo, filterContacts, filterDeals, filterCompanies, dateFrom, dateTo, offset, limit, sort, sortBy, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/crm/tasks';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json',
                'response'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (filterType !== undefined) {
                localVarQueryParameters['filter[type]'] = models_1.ObjectSerializer.serialize(filterType, "string");
            }
            if (filterStatus !== undefined) {
                localVarQueryParameters['filter[status]'] = models_1.ObjectSerializer.serialize(filterStatus, "'done' | 'undone'");
            }
            if (filterDate !== undefined) {
                localVarQueryParameters['filter[date]'] = models_1.ObjectSerializer.serialize(filterDate, "'overdue' | 'today' | 'tomorrow' | 'week' | 'range'");
            }
            if (filterAssignTo !== undefined) {
                localVarQueryParameters['filter[assignTo]'] = models_1.ObjectSerializer.serialize(filterAssignTo, "string");
            }
            if (filterContacts !== undefined) {
                localVarQueryParameters['filter[contacts]'] = models_1.ObjectSerializer.serialize(filterContacts, "string");
            }
            if (filterDeals !== undefined) {
                localVarQueryParameters['filter[deals]'] = models_1.ObjectSerializer.serialize(filterDeals, "string");
            }
            if (filterCompanies !== undefined) {
                localVarQueryParameters['filter[companies]'] = models_1.ObjectSerializer.serialize(filterCompanies, "string");
            }
            if (dateFrom !== undefined) {
                localVarQueryParameters['dateFrom'] = models_1.ObjectSerializer.serialize(dateFrom, "number");
            }
            if (dateTo !== undefined) {
                localVarQueryParameters['dateTo'] = models_1.ObjectSerializer.serialize(dateTo, "number");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            if (sortBy !== undefined) {
                localVarQueryParameters['sortBy'] = models_1.ObjectSerializer.serialize(sortBy, "string");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "TaskList");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    crmTasksIdDelete(id, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/crm/tasks/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling crmTasksIdDelete.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    crmTasksIdGet(id, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/crm/tasks/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling crmTasksIdGet.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Task");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    crmTasksIdPatch(id, body, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/crm/tasks/{id}'.replace('{' + 'id' + '}', encodeURIComponent(String(id)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (id === null || id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling crmTasksIdPatch.');
            }
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling crmTasksIdPatch.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PATCH',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(body, "CrmTasksIdPatchRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    crmTasksPost(body, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/crm/tasks';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (body === null || body === undefined) {
                throw new Error('Required parameter body was null or undefined when calling crmTasksPost.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(body, "CrmTasksPostRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CrmTasksPost201Response");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    crmTasktypesGet(options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/crm/tasktypes';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "TaskTypes");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.TasksApi = TasksApi; //# sourceMappingURL=tasksApi.js.map
}),
"[project]/node_modules/@getbrevo/brevo/dist/api/transactionalEmailsApi.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __awaiter = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TransactionalEmailsApi = exports.TransactionalEmailsApiApiKeys = void 0;
const requestCompat_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/requestCompat.js [app-rsc] (ecmascript)"));
const models_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const models_2 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const apis_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/apis.js [app-rsc] (ecmascript)");
let defaultBasePath = 'https://api.brevo.com/v3';
var TransactionalEmailsApiApiKeys;
(function(TransactionalEmailsApiApiKeys) {
    TransactionalEmailsApiApiKeys[TransactionalEmailsApiApiKeys["apiKey"] = 0] = "apiKey";
    TransactionalEmailsApiApiKeys[TransactionalEmailsApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(TransactionalEmailsApiApiKeys = exports.TransactionalEmailsApiApiKeys || (exports.TransactionalEmailsApiApiKeys = {}));
class TransactionalEmailsApi {
    constructor(basePathOrUsername, password, basePath){
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'apiKey': new models_2.ApiKeyAuth('header', 'api-key'),
            'partnerKey': new models_2.ApiKeyAuth('header', 'partner-key')
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[TransactionalEmailsApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    blockNewDomain(blockDomain, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smtp/blockedDomains';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (blockDomain === null || blockDomain === undefined) {
                throw new Error('Required parameter blockDomain was null or undefined when calling blockNewDomain.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(blockDomain, "BlockDomain")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    createSmtpTemplate(smtpTemplate, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smtp/templates';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (smtpTemplate === null || smtpTemplate === undefined) {
                throw new Error('Required parameter smtpTemplate was null or undefined when calling createSmtpTemplate.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(smtpTemplate, "CreateSmtpTemplate")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CreateModel");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    deleteBlockedDomain(domain, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smtp/blockedDomains/{domain}'.replace('{' + 'domain' + '}', encodeURIComponent(String(domain)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (domain === null || domain === undefined) {
                throw new Error('Required parameter domain was null or undefined when calling deleteBlockedDomain.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    deleteHardbounces(deleteHardbounces, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smtp/deleteHardbounces';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(deleteHardbounces, "DeleteHardbounces")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    deleteScheduledEmailById(identifier, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smtp/email/{identifier}'.replace('{' + 'identifier' + '}', encodeURIComponent(String(identifier)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (identifier === null || identifier === undefined) {
                throw new Error('Required parameter identifier was null or undefined when calling deleteScheduledEmailById.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    deleteSmtpTemplate(templateId, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smtp/templates/{templateId}'.replace('{' + 'templateId' + '}', encodeURIComponent(String(templateId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (templateId === null || templateId === undefined) {
                throw new Error('Required parameter templateId was null or undefined when calling deleteSmtpTemplate.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getAggregatedSmtpReport(startDate, endDate, days, tag, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smtp/statistics/aggregatedReport';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (startDate !== undefined) {
                localVarQueryParameters['startDate'] = models_1.ObjectSerializer.serialize(startDate, "string");
            }
            if (endDate !== undefined) {
                localVarQueryParameters['endDate'] = models_1.ObjectSerializer.serialize(endDate, "string");
            }
            if (days !== undefined) {
                localVarQueryParameters['days'] = models_1.ObjectSerializer.serialize(days, "number");
            }
            if (tag !== undefined) {
                localVarQueryParameters['tag'] = models_1.ObjectSerializer.serialize(tag, "string");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetAggregatedReport");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getBlockedDomains(options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smtp/blockedDomains';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetBlockedDomains");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getEmailEventReport(limit, offset, startDate, endDate, days, email, event, tags, messageId, templateId, sort, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smtp/statistics/events';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            if (startDate !== undefined) {
                localVarQueryParameters['startDate'] = models_1.ObjectSerializer.serialize(startDate, "string");
            }
            if (endDate !== undefined) {
                localVarQueryParameters['endDate'] = models_1.ObjectSerializer.serialize(endDate, "string");
            }
            if (days !== undefined) {
                localVarQueryParameters['days'] = models_1.ObjectSerializer.serialize(days, "number");
            }
            if (email !== undefined) {
                localVarQueryParameters['email'] = models_1.ObjectSerializer.serialize(email, "string");
            }
            if (event !== undefined) {
                localVarQueryParameters['event'] = models_1.ObjectSerializer.serialize(event, "'bounces' | 'hardBounces' | 'softBounces' | 'delivered' | 'spam' | 'requests' | 'opened' | 'clicks' | 'invalid' | 'deferred' | 'blocked' | 'unsubscribed' | 'error' | 'loadedByProxy'");
            }
            if (tags !== undefined) {
                localVarQueryParameters['tags'] = models_1.ObjectSerializer.serialize(tags, "string");
            }
            if (messageId !== undefined) {
                localVarQueryParameters['messageId'] = models_1.ObjectSerializer.serialize(messageId, "string");
            }
            if (templateId !== undefined) {
                localVarQueryParameters['templateId'] = models_1.ObjectSerializer.serialize(templateId, "number");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetEmailEventReport");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getScheduledEmailByBatchId(batchId, startDate, endDate, sort, status, limit, offset, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smtp/emailStatus/{batchId}'.replace('{' + 'batchId' + '}', encodeURIComponent(String(batchId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (batchId === null || batchId === undefined) {
                throw new Error('Required parameter batchId was null or undefined when calling getScheduledEmailByBatchId.');
            }
            if (startDate !== undefined) {
                localVarQueryParameters['startDate'] = models_1.ObjectSerializer.serialize(startDate, "string");
            }
            if (endDate !== undefined) {
                localVarQueryParameters['endDate'] = models_1.ObjectSerializer.serialize(endDate, "string");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            if (status !== undefined) {
                localVarQueryParameters['status'] = models_1.ObjectSerializer.serialize(status, "'processed' | 'inProgress' | 'queued'");
            }
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetScheduledEmailByBatchId");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getScheduledEmailByMessageId(messageId, startDate, endDate, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smtp/emailStatus/{messageId}'.replace('{' + 'messageId' + '}', encodeURIComponent(String(messageId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (messageId === null || messageId === undefined) {
                throw new Error('Required parameter messageId was null or undefined when calling getScheduledEmailByMessageId.');
            }
            if (startDate !== undefined) {
                localVarQueryParameters['startDate'] = models_1.ObjectSerializer.serialize(startDate, "string");
            }
            if (endDate !== undefined) {
                localVarQueryParameters['endDate'] = models_1.ObjectSerializer.serialize(endDate, "string");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetScheduledEmailByMessageId");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getSmtpReport(limit, offset, startDate, endDate, days, tag, sort, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smtp/statistics/reports';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            if (startDate !== undefined) {
                localVarQueryParameters['startDate'] = models_1.ObjectSerializer.serialize(startDate, "string");
            }
            if (endDate !== undefined) {
                localVarQueryParameters['endDate'] = models_1.ObjectSerializer.serialize(endDate, "string");
            }
            if (days !== undefined) {
                localVarQueryParameters['days'] = models_1.ObjectSerializer.serialize(days, "number");
            }
            if (tag !== undefined) {
                localVarQueryParameters['tag'] = models_1.ObjectSerializer.serialize(tag, "string");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetReports");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getSmtpTemplate(templateId, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smtp/templates/{templateId}'.replace('{' + 'templateId' + '}', encodeURIComponent(String(templateId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (templateId === null || templateId === undefined) {
                throw new Error('Required parameter templateId was null or undefined when calling getSmtpTemplate.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetSmtpTemplateOverview");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getSmtpTemplates(templateStatus, limit, offset, sort, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smtp/templates';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (templateStatus !== undefined) {
                localVarQueryParameters['templateStatus'] = models_1.ObjectSerializer.serialize(templateStatus, "boolean");
            }
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetSmtpTemplates");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getTransacBlockedContacts(startDate, endDate, limit, offset, senders, sort, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smtp/blockedContacts';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (startDate !== undefined) {
                localVarQueryParameters['startDate'] = models_1.ObjectSerializer.serialize(startDate, "string");
            }
            if (endDate !== undefined) {
                localVarQueryParameters['endDate'] = models_1.ObjectSerializer.serialize(endDate, "string");
            }
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            if (senders !== undefined) {
                localVarQueryParameters['senders'] = models_1.ObjectSerializer.serialize(senders, "Array<string>");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetTransacBlockedContacts");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getTransacEmailContent(uuid, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smtp/emails/{uuid}'.replace('{' + 'uuid' + '}', encodeURIComponent(String(uuid)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (uuid === null || uuid === undefined) {
                throw new Error('Required parameter uuid was null or undefined when calling getTransacEmailContent.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetTransacEmailContent");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getTransacEmailsList(email, templateId, messageId, startDate, endDate, sort, limit, offset, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smtp/emails';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (email !== undefined) {
                localVarQueryParameters['email'] = models_1.ObjectSerializer.serialize(email, "string");
            }
            if (templateId !== undefined) {
                localVarQueryParameters['templateId'] = models_1.ObjectSerializer.serialize(templateId, "number");
            }
            if (messageId !== undefined) {
                localVarQueryParameters['messageId'] = models_1.ObjectSerializer.serialize(messageId, "string");
            }
            if (startDate !== undefined) {
                localVarQueryParameters['startDate'] = models_1.ObjectSerializer.serialize(startDate, "string");
            }
            if (endDate !== undefined) {
                localVarQueryParameters['endDate'] = models_1.ObjectSerializer.serialize(endDate, "string");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetTransacEmailsList");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    sendTestTemplate(templateId, sendTestEmail, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smtp/templates/{templateId}/sendTest'.replace('{' + 'templateId' + '}', encodeURIComponent(String(templateId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (templateId === null || templateId === undefined) {
                throw new Error('Required parameter templateId was null or undefined when calling sendTestTemplate.');
            }
            if (sendTestEmail === null || sendTestEmail === undefined) {
                throw new Error('Required parameter sendTestEmail was null or undefined when calling sendTestTemplate.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(sendTestEmail, "SendTestEmail")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    sendTransacEmail(sendSmtpEmail, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smtp/email';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (sendSmtpEmail === null || sendSmtpEmail === undefined) {
                throw new Error('Required parameter sendSmtpEmail was null or undefined when calling sendTransacEmail.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(sendSmtpEmail, "SendSmtpEmail")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CreateSmtpEmail");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    smtpBlockedContactsEmailDelete(email, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smtp/blockedContacts/{email}'.replace('{' + 'email' + '}', encodeURIComponent(String(email)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (email === null || email === undefined) {
                throw new Error('Required parameter email was null or undefined when calling smtpBlockedContactsEmailDelete.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    smtpLogIdentifierDelete(identifier, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smtp/log/{identifier}'.replace('{' + 'identifier' + '}', encodeURIComponent(String(identifier)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (identifier === null || identifier === undefined) {
                throw new Error('Required parameter identifier was null or undefined when calling smtpLogIdentifierDelete.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    updateSmtpTemplate(templateId, smtpTemplate, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/smtp/templates/{templateId}'.replace('{' + 'templateId' + '}', encodeURIComponent(String(templateId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (templateId === null || templateId === undefined) {
                throw new Error('Required parameter templateId was null or undefined when calling updateSmtpTemplate.');
            }
            if (smtpTemplate === null || smtpTemplate === undefined) {
                throw new Error('Required parameter smtpTemplate was null or undefined when calling updateSmtpTemplate.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(smtpTemplate, "UpdateSmtpTemplate")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.TransactionalEmailsApi = TransactionalEmailsApi; //# sourceMappingURL=transactionalEmailsApi.js.map
}),
"[project]/node_modules/@getbrevo/brevo/dist/api/transactionalSMSApi.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __awaiter = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TransactionalSMSApi = exports.TransactionalSMSApiApiKeys = void 0;
const requestCompat_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/requestCompat.js [app-rsc] (ecmascript)"));
const models_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const models_2 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const apis_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/apis.js [app-rsc] (ecmascript)");
let defaultBasePath = 'https://api.brevo.com/v3';
var TransactionalSMSApiApiKeys;
(function(TransactionalSMSApiApiKeys) {
    TransactionalSMSApiApiKeys[TransactionalSMSApiApiKeys["apiKey"] = 0] = "apiKey";
    TransactionalSMSApiApiKeys[TransactionalSMSApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(TransactionalSMSApiApiKeys = exports.TransactionalSMSApiApiKeys || (exports.TransactionalSMSApiApiKeys = {}));
class TransactionalSMSApi {
    constructor(basePathOrUsername, password, basePath){
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'apiKey': new models_2.ApiKeyAuth('header', 'api-key'),
            'partnerKey': new models_2.ApiKeyAuth('header', 'partner-key')
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[TransactionalSMSApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    getSmsEvents(limit, startDate, endDate, offset, days, phoneNumber, event, tags, sort, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/transactionalSMS/statistics/events';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (startDate !== undefined) {
                localVarQueryParameters['startDate'] = models_1.ObjectSerializer.serialize(startDate, "string");
            }
            if (endDate !== undefined) {
                localVarQueryParameters['endDate'] = models_1.ObjectSerializer.serialize(endDate, "string");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            if (days !== undefined) {
                localVarQueryParameters['days'] = models_1.ObjectSerializer.serialize(days, "number");
            }
            if (phoneNumber !== undefined) {
                localVarQueryParameters['phoneNumber'] = models_1.ObjectSerializer.serialize(phoneNumber, "string");
            }
            if (event !== undefined) {
                localVarQueryParameters['event'] = models_1.ObjectSerializer.serialize(event, "'bounces' | 'hardBounces' | 'softBounces' | 'delivered' | 'sent' | 'accepted' | 'unsubscription' | 'replies' | 'blocked' | 'rejected' | 'skipped'");
            }
            if (tags !== undefined) {
                localVarQueryParameters['tags'] = models_1.ObjectSerializer.serialize(tags, "string");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetSmsEventReport");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getTransacAggregatedSmsReport(startDate, endDate, days, tag, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/transactionalSMS/statistics/aggregatedReport';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (startDate !== undefined) {
                localVarQueryParameters['startDate'] = models_1.ObjectSerializer.serialize(startDate, "string");
            }
            if (endDate !== undefined) {
                localVarQueryParameters['endDate'] = models_1.ObjectSerializer.serialize(endDate, "string");
            }
            if (days !== undefined) {
                localVarQueryParameters['days'] = models_1.ObjectSerializer.serialize(days, "number");
            }
            if (tag !== undefined) {
                localVarQueryParameters['tag'] = models_1.ObjectSerializer.serialize(tag, "string");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetTransacAggregatedSmsReport");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getTransacSmsReport(startDate, endDate, days, tag, sort, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/transactionalSMS/statistics/reports';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (startDate !== undefined) {
                localVarQueryParameters['startDate'] = models_1.ObjectSerializer.serialize(startDate, "string");
            }
            if (endDate !== undefined) {
                localVarQueryParameters['endDate'] = models_1.ObjectSerializer.serialize(endDate, "string");
            }
            if (days !== undefined) {
                localVarQueryParameters['days'] = models_1.ObjectSerializer.serialize(days, "number");
            }
            if (tag !== undefined) {
                localVarQueryParameters['tag'] = models_1.ObjectSerializer.serialize(tag, "string");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetTransacSmsReport");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    sendTransacSms(sendTransacSms, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/transactionalSMS/sms';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (sendTransacSms === null || sendTransacSms === undefined) {
                throw new Error('Required parameter sendTransacSms was null or undefined when calling sendTransacSms.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(sendTransacSms, "SendTransacSms")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "SendSms");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.TransactionalSMSApi = TransactionalSMSApi; //# sourceMappingURL=transactionalSMSApi.js.map
}),
"[project]/node_modules/@getbrevo/brevo/dist/api/transactionalWhatsAppApi.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __awaiter = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TransactionalWhatsAppApi = exports.TransactionalWhatsAppApiApiKeys = void 0;
const requestCompat_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/requestCompat.js [app-rsc] (ecmascript)"));
const models_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const models_2 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const apis_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/apis.js [app-rsc] (ecmascript)");
let defaultBasePath = 'https://api.brevo.com/v3';
var TransactionalWhatsAppApiApiKeys;
(function(TransactionalWhatsAppApiApiKeys) {
    TransactionalWhatsAppApiApiKeys[TransactionalWhatsAppApiApiKeys["apiKey"] = 0] = "apiKey";
    TransactionalWhatsAppApiApiKeys[TransactionalWhatsAppApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(TransactionalWhatsAppApiApiKeys = exports.TransactionalWhatsAppApiApiKeys || (exports.TransactionalWhatsAppApiApiKeys = {}));
class TransactionalWhatsAppApi {
    constructor(basePathOrUsername, password, basePath){
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'apiKey': new models_2.ApiKeyAuth('header', 'api-key'),
            'partnerKey': new models_2.ApiKeyAuth('header', 'partner-key')
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[TransactionalWhatsAppApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    getWhatsappEventReport(limit, offset, startDate, endDate, days, contactNumber, event, sort, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/whatsapp/statistics/events';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            if (startDate !== undefined) {
                localVarQueryParameters['startDate'] = models_1.ObjectSerializer.serialize(startDate, "string");
            }
            if (endDate !== undefined) {
                localVarQueryParameters['endDate'] = models_1.ObjectSerializer.serialize(endDate, "string");
            }
            if (days !== undefined) {
                localVarQueryParameters['days'] = models_1.ObjectSerializer.serialize(days, "number");
            }
            if (contactNumber !== undefined) {
                localVarQueryParameters['contactNumber'] = models_1.ObjectSerializer.serialize(contactNumber, "string");
            }
            if (event !== undefined) {
                localVarQueryParameters['event'] = models_1.ObjectSerializer.serialize(event, "'sent' | 'delivered' | 'read' | 'error' | 'unsubscribe' | 'reply' | 'soft-bounce'");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetWhatsappEventReport");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    sendWhatsappMessage(sendWhatsappMessage, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/whatsapp/sendMessage';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (sendWhatsappMessage === null || sendWhatsappMessage === undefined) {
                throw new Error('Required parameter sendWhatsappMessage was null or undefined when calling sendWhatsappMessage.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(sendWhatsappMessage, "SendWhatsappMessage")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "SendWhatsappMessage201Response");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.TransactionalWhatsAppApi = TransactionalWhatsAppApi; //# sourceMappingURL=transactionalWhatsAppApi.js.map
}),
"[project]/node_modules/@getbrevo/brevo/dist/api/userApi.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __awaiter = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UserApi = exports.UserApiApiKeys = void 0;
const requestCompat_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/requestCompat.js [app-rsc] (ecmascript)"));
const models_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const models_2 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const apis_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/apis.js [app-rsc] (ecmascript)");
let defaultBasePath = 'https://api.brevo.com/v3';
var UserApiApiKeys;
(function(UserApiApiKeys) {
    UserApiApiKeys[UserApiApiKeys["apiKey"] = 0] = "apiKey";
    UserApiApiKeys[UserApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(UserApiApiKeys = exports.UserApiApiKeys || (exports.UserApiApiKeys = {}));
class UserApi {
    constructor(basePathOrUsername, password, basePath){
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'apiKey': new models_2.ApiKeyAuth('header', 'api-key'),
            'partnerKey': new models_2.ApiKeyAuth('header', 'partner-key')
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[UserApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    editUserPermission(updatePermissions, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/organization/user/update/permissions';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (updatePermissions === null || updatePermissions === undefined) {
                throw new Error('Required parameter updatePermissions was null or undefined when calling editUserPermission.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(updatePermissions, "Inviteuser")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Inviteuser");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getInvitedUsersList(options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/organization/invited/users';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetInvitedUsersList");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getUserPermission(email, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/organization/user/{email}/permissions'.replace('{' + 'email' + '}', encodeURIComponent(String(email)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (email === null || email === undefined) {
                throw new Error('Required parameter email was null or undefined when calling getUserPermission.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetUserPermission");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    inviteuser(sendInvitation, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/organization/user/invitation/send';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (sendInvitation === null || sendInvitation === undefined) {
                throw new Error('Required parameter sendInvitation was null or undefined when calling inviteuser.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(sendInvitation, "Inviteuser")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Inviteuser");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    putRevokeUserPermission(email, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/organization/user/invitation/revoke/{email}'.replace('{' + 'email' + '}', encodeURIComponent(String(email)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (email === null || email === undefined) {
                throw new Error('Required parameter email was null or undefined when calling putRevokeUserPermission.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "PutRevokeUserPermission");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    putresendcancelinvitation(action, email, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/organization/user/invitation/{action}/{email}'.replace('{' + 'action' + '}', encodeURIComponent(String(action))).replace('{' + 'email' + '}', encodeURIComponent(String(email)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (action === null || action === undefined) {
                throw new Error('Required parameter action was null or undefined when calling putresendcancelinvitation.');
            }
            if (email === null || email === undefined) {
                throw new Error('Required parameter email was null or undefined when calling putresendcancelinvitation.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Putresendcancelinvitation");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.UserApi = UserApi; //# sourceMappingURL=userApi.js.map
}),
"[project]/node_modules/@getbrevo/brevo/dist/api/webhooksApi.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __awaiter = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.WebhooksApi = exports.WebhooksApiApiKeys = void 0;
const requestCompat_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/requestCompat.js [app-rsc] (ecmascript)"));
const models_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const models_2 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const apis_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/apis.js [app-rsc] (ecmascript)");
let defaultBasePath = 'https://api.brevo.com/v3';
var WebhooksApiApiKeys;
(function(WebhooksApiApiKeys) {
    WebhooksApiApiKeys[WebhooksApiApiKeys["apiKey"] = 0] = "apiKey";
    WebhooksApiApiKeys[WebhooksApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(WebhooksApiApiKeys = exports.WebhooksApiApiKeys || (exports.WebhooksApiApiKeys = {}));
class WebhooksApi {
    constructor(basePathOrUsername, password, basePath){
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'apiKey': new models_2.ApiKeyAuth('header', 'api-key'),
            'partnerKey': new models_2.ApiKeyAuth('header', 'partner-key')
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[WebhooksApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    createWebhook(createWebhook, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/webhooks';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (createWebhook === null || createWebhook === undefined) {
                throw new Error('Required parameter createWebhook was null or undefined when calling createWebhook.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(createWebhook, "CreateWebhook")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CreateModel");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    deleteWebhook(webhookId, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/webhooks/{webhookId}'.replace('{' + 'webhookId' + '}', encodeURIComponent(String(webhookId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (webhookId === null || webhookId === undefined) {
                throw new Error('Required parameter webhookId was null or undefined when calling deleteWebhook.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    exportWebhooksHistory(exportWebhookHistory, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/webhooks/export';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (exportWebhookHistory === null || exportWebhookHistory === undefined) {
                throw new Error('Required parameter exportWebhookHistory was null or undefined when calling exportWebhooksHistory.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(exportWebhookHistory, "ExportWebhooksHistory")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CreatedProcessId");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getWebhook(webhookId, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/webhooks/{webhookId}'.replace('{' + 'webhookId' + '}', encodeURIComponent(String(webhookId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (webhookId === null || webhookId === undefined) {
                throw new Error('Required parameter webhookId was null or undefined when calling getWebhook.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetWebhook");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getWebhooks(type, sort, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/webhooks';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (type !== undefined) {
                localVarQueryParameters['type'] = models_1.ObjectSerializer.serialize(type, "'marketing' | 'transactional' | 'inbound'");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetWebhooks");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    updateWebhook(webhookId, updateWebhook, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/webhooks/{webhookId}'.replace('{' + 'webhookId' + '}', encodeURIComponent(String(webhookId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (webhookId === null || webhookId === undefined) {
                throw new Error('Required parameter webhookId was null or undefined when calling updateWebhook.');
            }
            if (updateWebhook === null || updateWebhook === undefined) {
                throw new Error('Required parameter updateWebhook was null or undefined when calling updateWebhook.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(updateWebhook, "UpdateWebhook")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.WebhooksApi = WebhooksApi; //# sourceMappingURL=webhooksApi.js.map
}),
"[project]/node_modules/@getbrevo/brevo/dist/api/whatsAppCampaignsApi.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __awaiter = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.WhatsAppCampaignsApi = exports.WhatsAppCampaignsApiApiKeys = void 0;
const requestCompat_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/requestCompat.js [app-rsc] (ecmascript)"));
const models_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const models_2 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)");
const apis_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/apis.js [app-rsc] (ecmascript)");
let defaultBasePath = 'https://api.brevo.com/v3';
var WhatsAppCampaignsApiApiKeys;
(function(WhatsAppCampaignsApiApiKeys) {
    WhatsAppCampaignsApiApiKeys[WhatsAppCampaignsApiApiKeys["apiKey"] = 0] = "apiKey";
    WhatsAppCampaignsApiApiKeys[WhatsAppCampaignsApiApiKeys["partnerKey"] = 1] = "partnerKey";
})(WhatsAppCampaignsApiApiKeys = exports.WhatsAppCampaignsApiApiKeys || (exports.WhatsAppCampaignsApiApiKeys = {}));
class WhatsAppCampaignsApi {
    constructor(basePathOrUsername, password, basePath){
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'apiKey': new models_2.ApiKeyAuth('header', 'api-key'),
            'partnerKey': new models_2.ApiKeyAuth('header', 'partner-key')
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[WhatsAppCampaignsApiApiKeys[key]].apiKey = value;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    createWhatsAppCampaign(whatsAppCampaigns, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/whatsappCampaigns';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (whatsAppCampaigns === null || whatsAppCampaigns === undefined) {
                throw new Error('Required parameter whatsAppCampaigns was null or undefined when calling createWhatsAppCampaign.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(whatsAppCampaigns, "CreateWhatsAppCampaign")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CreateModel");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    createWhatsAppTemplate(whatsAppTemplates, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/whatsppCampaigns/template';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (whatsAppTemplates === null || whatsAppTemplates === undefined) {
                throw new Error('Required parameter whatsAppTemplates was null or undefined when calling createWhatsAppTemplate.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(whatsAppTemplates, "CreateWhatsAppTemplate")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "CreateModel");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    deleteWhatsAppCampaign(campaignId, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/whatsappCampaigns/{campaignId}'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (campaignId === null || campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling deleteWhatsAppCampaign.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getWhatsAppCampaign(campaignId, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/whatsappCampaigns/{campaignId}'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (campaignId === null || campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling getWhatsAppCampaign.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetWhatsappCampaignOverview");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getWhatsAppCampaigns(startDate, endDate, limit, offset, sort, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/whatsappCampaigns';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (startDate !== undefined) {
                localVarQueryParameters['startDate'] = models_1.ObjectSerializer.serialize(startDate, "string");
            }
            if (endDate !== undefined) {
                localVarQueryParameters['endDate'] = models_1.ObjectSerializer.serialize(endDate, "string");
            }
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetWhatsappCampaigns");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getWhatsAppConfig(options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/whatsappCampaigns/config';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetWhatsAppConfig");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    getWhatsAppTemplates(startDate, endDate, limit, offset, sort, source, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/whatsappCampaigns/template-list';
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (startDate !== undefined) {
                localVarQueryParameters['startDate'] = models_1.ObjectSerializer.serialize(startDate, "string");
            }
            if (endDate !== undefined) {
                localVarQueryParameters['endDate'] = models_1.ObjectSerializer.serialize(endDate, "string");
            }
            if (limit !== undefined) {
                localVarQueryParameters['limit'] = models_1.ObjectSerializer.serialize(limit, "number");
            }
            if (offset !== undefined) {
                localVarQueryParameters['offset'] = models_1.ObjectSerializer.serialize(offset, "number");
            }
            if (sort !== undefined) {
                localVarQueryParameters['sort'] = models_1.ObjectSerializer.serialize(sort, "'asc' | 'desc'");
            }
            if (source !== undefined) {
                localVarQueryParameters['source'] = models_1.ObjectSerializer.serialize(source, "'Automation' | 'Conversations'");
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "GetWATemplates");
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    sendWhatsAppTemplateApproval(templateId, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/whatsappCampaigns/template/approval/{templateId}'.replace('{' + 'templateId' + '}', encodeURIComponent(String(templateId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (templateId === null || templateId === undefined) {
                throw new Error('Required parameter templateId was null or undefined when calling sendWhatsAppTemplateApproval.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    updateWhatsAppCampaign(campaignId, whatsAppCampaign, options = {
        headers: {}
    }) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarPath = this.basePath + '/whatsappCampaigns/{campaignId}'.replace('{' + 'campaignId' + '}', encodeURIComponent(String(campaignId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = [
                'application/json'
            ];
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            } else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            if (campaignId === null || campaignId === undefined) {
                throw new Error('Required parameter campaignId was null or undefined when calling updateWhatsAppCampaign.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'PUT',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                url: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(whatsAppCampaign, "UpdateWhatsAppCampaign")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.apiKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.apiKey.applyToRequest(localVarRequestOptions));
            }
            if (this.authentications.partnerKey.apiKey) {
                authenticationPromise = authenticationPromise.then(()=>this.authentications.partnerKey.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(()=>this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors){
                interceptorPromise = interceptorPromise.then(()=>interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(()=>{
                if (Object.keys(localVarFormParams).length) {
                    if ("TURBOPACK compile-time falsy", 0) //TURBOPACK unreachable
                    ;
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject)=>{
                    (0, requestCompat_1.default)(localVarRequestOptions, (error, response, body)=>{
                        if (error) {
                            reject(error);
                        } else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({
                                    response: response,
                                    body: body
                                });
                            } else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.WhatsAppCampaignsApi = WhatsAppCampaignsApi; //# sourceMappingURL=whatsAppCampaignsApi.js.map
}),
"[project]/node_modules/@getbrevo/brevo/dist/api/apis.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __createBinding = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.APIS = exports.HttpError = void 0;
__exportStar(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/accountApi.js [app-rsc] (ecmascript)"), exports);
const accountApi_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/accountApi.js [app-rsc] (ecmascript)");
__exportStar(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/companiesApi.js [app-rsc] (ecmascript)"), exports);
const companiesApi_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/companiesApi.js [app-rsc] (ecmascript)");
__exportStar(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/contactsApi.js [app-rsc] (ecmascript)"), exports);
const contactsApi_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/contactsApi.js [app-rsc] (ecmascript)");
__exportStar(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/conversationsApi.js [app-rsc] (ecmascript)"), exports);
const conversationsApi_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/conversationsApi.js [app-rsc] (ecmascript)");
__exportStar(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/couponsApi.js [app-rsc] (ecmascript)"), exports);
const couponsApi_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/couponsApi.js [app-rsc] (ecmascript)");
__exportStar(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/dealsApi.js [app-rsc] (ecmascript)"), exports);
const dealsApi_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/dealsApi.js [app-rsc] (ecmascript)");
__exportStar(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/domainsApi.js [app-rsc] (ecmascript)"), exports);
const domainsApi_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/domainsApi.js [app-rsc] (ecmascript)");
__exportStar(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/ecommerceApi.js [app-rsc] (ecmascript)"), exports);
const ecommerceApi_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/ecommerceApi.js [app-rsc] (ecmascript)");
__exportStar(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/emailCampaignsApi.js [app-rsc] (ecmascript)"), exports);
const emailCampaignsApi_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/emailCampaignsApi.js [app-rsc] (ecmascript)");
__exportStar(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/eventsApi.js [app-rsc] (ecmascript)"), exports);
const eventsApi_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/eventsApi.js [app-rsc] (ecmascript)");
__exportStar(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/externalFeedsApi.js [app-rsc] (ecmascript)"), exports);
const externalFeedsApi_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/externalFeedsApi.js [app-rsc] (ecmascript)");
__exportStar(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/filesApi.js [app-rsc] (ecmascript)"), exports);
const filesApi_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/filesApi.js [app-rsc] (ecmascript)");
__exportStar(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/inboundParsingApi.js [app-rsc] (ecmascript)"), exports);
const inboundParsingApi_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/inboundParsingApi.js [app-rsc] (ecmascript)");
__exportStar(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/masterAccountApi.js [app-rsc] (ecmascript)"), exports);
const masterAccountApi_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/masterAccountApi.js [app-rsc] (ecmascript)");
__exportStar(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/notesApi.js [app-rsc] (ecmascript)"), exports);
const notesApi_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/notesApi.js [app-rsc] (ecmascript)");
__exportStar(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/paymentsApi.js [app-rsc] (ecmascript)"), exports);
const paymentsApi_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/paymentsApi.js [app-rsc] (ecmascript)");
__exportStar(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/processApi.js [app-rsc] (ecmascript)"), exports);
const processApi_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/processApi.js [app-rsc] (ecmascript)");
__exportStar(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/resellerApi.js [app-rsc] (ecmascript)"), exports);
const resellerApi_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/resellerApi.js [app-rsc] (ecmascript)");
__exportStar(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/sMSCampaignsApi.js [app-rsc] (ecmascript)"), exports);
const sMSCampaignsApi_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/sMSCampaignsApi.js [app-rsc] (ecmascript)");
__exportStar(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/sendersApi.js [app-rsc] (ecmascript)"), exports);
const sendersApi_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/sendersApi.js [app-rsc] (ecmascript)");
__exportStar(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/tasksApi.js [app-rsc] (ecmascript)"), exports);
const tasksApi_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/tasksApi.js [app-rsc] (ecmascript)");
__exportStar(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/transactionalEmailsApi.js [app-rsc] (ecmascript)"), exports);
const transactionalEmailsApi_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/transactionalEmailsApi.js [app-rsc] (ecmascript)");
__exportStar(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/transactionalSMSApi.js [app-rsc] (ecmascript)"), exports);
const transactionalSMSApi_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/transactionalSMSApi.js [app-rsc] (ecmascript)");
__exportStar(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/transactionalWhatsAppApi.js [app-rsc] (ecmascript)"), exports);
const transactionalWhatsAppApi_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/transactionalWhatsAppApi.js [app-rsc] (ecmascript)");
__exportStar(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/userApi.js [app-rsc] (ecmascript)"), exports);
const userApi_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/userApi.js [app-rsc] (ecmascript)");
__exportStar(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/webhooksApi.js [app-rsc] (ecmascript)"), exports);
const webhooksApi_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/webhooksApi.js [app-rsc] (ecmascript)");
__exportStar(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/whatsAppCampaignsApi.js [app-rsc] (ecmascript)"), exports);
const whatsAppCampaignsApi_1 = __turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/whatsAppCampaignsApi.js [app-rsc] (ecmascript)");
class HttpError extends Error {
    constructor(response, body, statusCode){
        super('HTTP request failed');
        this.response = response;
        this.body = body;
        this.statusCode = statusCode;
        this.name = 'HttpError';
    }
}
exports.HttpError = HttpError;
exports.APIS = [
    accountApi_1.AccountApi,
    companiesApi_1.CompaniesApi,
    contactsApi_1.ContactsApi,
    conversationsApi_1.ConversationsApi,
    couponsApi_1.CouponsApi,
    dealsApi_1.DealsApi,
    domainsApi_1.DomainsApi,
    ecommerceApi_1.EcommerceApi,
    emailCampaignsApi_1.EmailCampaignsApi,
    eventsApi_1.EventsApi,
    externalFeedsApi_1.ExternalFeedsApi,
    filesApi_1.FilesApi,
    inboundParsingApi_1.InboundParsingApi,
    masterAccountApi_1.MasterAccountApi,
    notesApi_1.NotesApi,
    paymentsApi_1.PaymentsApi,
    processApi_1.ProcessApi,
    resellerApi_1.ResellerApi,
    sMSCampaignsApi_1.SMSCampaignsApi,
    sendersApi_1.SendersApi,
    tasksApi_1.TasksApi,
    transactionalEmailsApi_1.TransactionalEmailsApi,
    transactionalSMSApi_1.TransactionalSMSApi,
    transactionalWhatsAppApi_1.TransactionalWhatsAppApi,
    userApi_1.UserApi,
    webhooksApi_1.WebhooksApi,
    whatsAppCampaignsApi_1.WhatsAppCampaignsApi
]; //# sourceMappingURL=apis.js.map
}),
];

//# sourceMappingURL=node_modules_%40getbrevo_brevo_dist_api_5358760c._.js.map