module.exports = [
"[project]/node_modules/@getbrevo/brevo/dist/requestCompat.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __importDefault = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.IncomingMessage = void 0;
const axios_1 = __importDefault(__turbopack_context__.r("[project]/node_modules/axios/dist/node/axios.cjs [app-rsc] (ecmascript)"));
const http_1 = __turbopack_context__.r("[externals]/http [external] (http, cjs)");
class IncomingMessage extends http_1.IncomingMessage {
    constructor(res){
        const mockSocket = {
            remoteAddress: '',
            remoteFamily: '',
            remotePort: 0,
            localAddress: '',
            localPort: 0,
            bytesRead: 0,
            bytesWritten: 0,
            connecting: false,
            destroyed: false,
            readable: true,
            writable: false,
            allowHalfOpen: false,
            timeout: 0,
            setKeepAlive: ()=>{},
            setNoDelay: ()=>{},
            setTimeout: ()=>{},
            unref: ()=>{},
            ref: ()=>{},
            cork: ()=>{},
            uncork: ()=>{},
            destroy: ()=>{},
            pause: ()=>{},
            resume: ()=>{},
            write: ()=>false,
            end: ()=>{},
            on: ()=>{},
            once: ()=>{},
            emit: ()=>false,
            addListener: ()=>{},
            removeListener: ()=>{},
            removeAllListeners: ()=>{},
            setMaxListeners: ()=>{},
            getMaxListeners: ()=>0,
            listeners: ()=>[],
            rawListeners: ()=>[],
            listenerCount: ()=>0,
            prependListener: ()=>{},
            prependOnceListener: ()=>{},
            eventNames: ()=>[]
        };
        super(mockSocket);
        this.statusCode = res.status;
        this.statusMessage = res.statusText;
        this.headers = res.headers;
        const responseData = res.data;
        if (typeof responseData === 'string') {
            this.push(responseData);
        } else if (responseData) {
            this.push(JSON.stringify(responseData));
        }
        this.push(null);
    }
}
exports.IncomingMessage = IncomingMessage;
function request(options, callback) {
    var _a;
    const axiosConfig = {
        method: (_a = options.method) === null || _a === void 0 ? void 0 : _a.toLowerCase(),
        url: options.url || options.uri,
        params: options.params || options.qs,
        headers: options.headers,
        data: options.data || options.body,
        auth: options.auth
    };
    if (options.form) {
        axiosConfig.headers = axiosConfig.headers || {};
        axiosConfig.headers['Content-Type'] = 'application/x-www-form-urlencoded';
        axiosConfig.data = new URLSearchParams(options.form).toString();
    } else if (options.formData) {
        axiosConfig.headers = axiosConfig.headers || {};
        axiosConfig.headers['Content-Type'] = 'multipart/form-data';
        axiosConfig.data = options.formData;
    }
    if (options.json) {
        axiosConfig.headers = axiosConfig.headers || {};
        axiosConfig.headers['Content-Type'] = 'application/json';
        if (typeof axiosConfig.data === 'object' && axiosConfig.data !== null) {
            axiosConfig.data = JSON.stringify(axiosConfig.data);
        }
    }
    (0, axios_1.default)(axiosConfig).then((response)=>{
        const incomingMessage = new IncomingMessage(response);
        callback(null, incomingMessage, response.data);
    }).catch((error)=>{
        if (error.response) {
            const incomingMessage = new IncomingMessage(error.response);
            callback(error, incomingMessage, error.response.data);
        } else {
            callback(error, null, null);
        }
    });
}
exports.default = request; //# sourceMappingURL=requestCompat.js.map
}),
"[project]/node_modules/@getbrevo/brevo/dist/api.js [app-rsc] (ecmascript)", ((__turbopack_context__, module, exports) => {
"use strict";

var __createBinding = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = {
            enumerable: true,
            get: function() {
                return m[k];
            }
        };
    }
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var __exportStar = /*TURBOPACK member replacement*/ __turbopack_context__.e && /*TURBOPACK member replacement*/ __turbopack_context__.e.__exportStar || function(m, exports1) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
__exportStar(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/api/apis.js [app-rsc] (ecmascript)"), exports);
__exportStar(__turbopack_context__.r("[project]/node_modules/@getbrevo/brevo/dist/model/models.js [app-rsc] (ecmascript)"), exports); //# sourceMappingURL=api.js.map
}),
];

//# sourceMappingURL=node_modules_%40getbrevo_brevo_dist_49db9938._.js.map